{
  "data": [
    {
      "id": 12341535,
      "slug": "if3wr3",
      "title": "Hexo主题XFun",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "![xfun-hexo-theme.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1598666814364-c2cb3a1b-c0b9-4cc7-94a0-d570c310d818.png#height=1474\u0026id=qiGpX\u0026margin=%5Bobject%20Object%5D\u0026name=xfun-hexo-theme.png\u0026originHeight=1474\u0026originWidth=2616\u0026originalType=binary\u0026ratio=1\u0026size=531941\u0026status=done\u0026style=none\u0026width=2616)\u003cbr /\u003e花了根据几天时间在官方landscape主题上修改并借鉴了next一些的风格，命名为XFun，虽说有些简陋，但是符合我喜欢的风格。:::\n\u003ca name=\"Installation\"\u003e\u003c/a\u003e\n## Installation\n\n\n\u003ca name=\"Install\"\u003e\u003c/a\u003e\n### Install\n\n\n```bash\n$ git clone https://github.com/jianjunx/hexo-theme-xfun.git themes/xfun\n```\n\n\u003cbr /\u003eXFun 的主题搜索依赖[hexo-generator-search]插件，请 hexo 项目中执行以下命令安装\u003cbr /\u003e\n\n```bash\n$ npm install hexo-generator-search --save\n```\n\n\u003cbr /\u003e并在 hexo 的_config.yml(不是 xfun 主题里的那个)中添加如下配置\u003cbr /\u003e\n\n```yaml\nsearch:\n  path: search.json\n  field: post\n  content: true\n```\n\n\u003cbr /\u003e如果要启用 RSS 的话请先安装[hexo-generate-feed]\u003cbr /\u003e\n\n```bash\n$ npm install hexo-generate-feed --save\n```\n\n\n\u003ca name=\"Enable\"\u003e\u003c/a\u003e\n### Enable\n\n\u003cbr /\u003e将hexo项目下  `_config.yml` 中的 `theme` 选项修改为 `xfun`.\u003cbr /\u003e\n\n\u003ca name=\"Update\"\u003e\u003c/a\u003e\n### Update\n\n\n```bash\ncd themes/xfun\ngit pull\n```\n\n\n\u003ca name=\"Configuration\"\u003e\u003c/a\u003e\n## Configuration\n全部配置如下：\n```yaml\n# Header\nmenu:\n  首页:\n    icon: icon-home # 字体图标类名，FontAwesome图标，在css/_partial/icons.styl定义\n    link: / # 链接地址\n\n# 配合hexo-generator-feed插件\nrss: /atom.xml \n\n# logo地址\nlogo: \n\n# Content\nexcerpt_link: 阅读全文\u003e\u003e\n\n# 图片预览\nfancybox: true\n\n# Sidebar\nsidebar: right\nwidgets:\n  - personal\n  # - category\n  # - tag\n  # - tagcloud\n  # - archive\n  # - recent_posts\n\n#个人信息栏设置\npersonal: \n  avatar: #头像地址\n  name: JJ Xie # 作者名\n  description: XFun. #描述\n\nlines: #个人信息栏下方的链接\n  标签: #名称\n    icon: icon-tags #图标类名\n    link: /tags\n  分类:\n    icon: icon-category\n    link: /categorys\n  XFun:\n    icon: icon-github\n    link: https://github.com/jianjunx/hexo-theme-xfun\n\nicons: #个人信息栏下方的图标按钮\n  GitHub:\n    icon: icon-github\n    link: https://github.com/jianjunx\n  微博:\n    icon: icon-weibo\n    link:\n  知乎:\n    icon: icon-zhihu\n    link: /\n  掘金:\n    icon: icon-juejin\n    link: /\n\nvaline:\n  appId: #valine leanClode appId\n  appKey: #valine leanClode appKey\n\n# widget behavior\narchive_type: 'monthly'\nshow_count: true\nribbon_flow: true #背景彩带\n\n#favicon.ico地址\nfavicon: \n\n# 右上角GitHub\ngithub: \n```\n\u003ca name=\"IvJ6G\"\u003e\u003c/a\u003e\n### 配置中的 icon\n配置中的icon合法的值是在主题中css/_partial/icons.styl 文件中定义的类名，具体方法如下：\n\n1. 去[FontAwesome](https://fontawesome.dashgame.com/)找到心仪的图标,选中按F12打开控制台。\n1. 在Element(元素)那里找到对应图标的i标签，如下：\n\n![get-icon.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1598668538741-74816168-2800-469f-806a-a3f175577342.png#height=614\u0026id=Rr0FJ\u0026margin=%5Bobject%20Object%5D\u0026name=get-icon.png\u0026originHeight=614\u0026originWidth=1652\u0026originalType=binary\u0026ratio=1\u0026size=263010\u0026status=done\u0026style=none\u0026width=1652)\n\n3. 在css/_partial/icons.styl中新增类名\n```css\n.icon-weibo\n  font-style: normal\n  \u0026:before \n    content: \"\\f18a\"; // 把上图2那里的一串放到这\n    font-family: FontAwesome;\n    font-size: 12px; // 调整图标大小\n```\n\n4. 在配置文件中使用\n```yaml\n微博:\n    icon: icon-weibo\n    link:\n```\n\n\n\u003ca name=\"IX5zJ\"\u003e\u003c/a\u003e\n### valine配置\n主题中自带了valine评论，这里只需要获取LeanCloud账号便可。\n\u003ca name=\"NvBpn\"\u003e\u003c/a\u003e\n#### 获取APPID和APPKEY\n请先[登录](https://leancloud.cn/dashboard/login.html#/signin)或[注册](https://leancloud.cn/dashboard/login.html#/signup) `LeanCloud`, 进入[控制台](https://leancloud.cn/dashboard/applist.html#/apps)后点击左下角[创建应用](https://leancloud.cn/dashboard/applist.html#/newapp)：\u003cbr /\u003e![](https://cdn.nlark.com/yuque/0/2020/jpeg/476855/1598669037918-9cecd486-2b10-4c8a-a714-02550121ea7d.jpeg#height=456\u0026id=ZDeRa\u0026originHeight=456\u0026originWidth=616\u0026originalType=binary\u0026ratio=1\u0026size=0\u0026status=done\u0026style=none\u0026width=616)\u003cbr /\u003e应用创建好以后，进入刚刚创建的应用，选择左下角的设置\u003e应用Key，然后就能看到你的APP ID和APP Key了：\u003cbr /\u003e![](https://cdn.nlark.com/yuque/0/2020/jpeg/476855/1598669070281-1098abe2-decc-4db0-b0cf-9f1e5988e534.jpeg#height=533\u0026id=ml9zg\u0026originHeight=533\u0026originWidth=1202\u0026originalType=binary\u0026ratio=1\u0026size=0\u0026status=done\u0026style=none\u0026width=1202)\u003cbr /\u003e\n\u003cbr /\u003e更多配置请参考[valine](https://valine.js.org/quickstart.html)\n\u003ca name=\"9zDtd\"\u003e\u003c/a\u003e\n#### 关闭评论\n\n1. 全局关闭：在主题配置文件中删除valine配置项\n1. 单个文章关闭：请在文章顶部(---内)添加 comment: false 配置\n\n​\u003cbr /\u003e\n\u003ca name=\"0o8P2\"\u003e\u003c/a\u003e\n### 文章版权信息\n主题默认会为每个文章底部添加版权声明信息，如果某篇文章需要关闭该信息，请在文章顶部配置信息添加 copyright: false 配置即可。\u003cbr /\u003e\n\n\u003ca name=\"QzJwo\"\u003e\u003c/a\u003e\n### GitHub\n在右上角添加Github图标 github: \u003cyou github url\u003e\n\u003ca name=\"4Xxm9\"\u003e\u003c/a\u003e\n### ribbon_flow 背景彩带\n这里是在网上找的一段代码，可以在_config.yml中选择开启或关闭。\n\u003ca name=\"msvbx\"\u003e\u003c/a\u003e\n#### 调整背景色和图\n如果启用了ribbon_flow选项预想自定义背景颜色和图片就需要到主题中的source/js/ribbons.js文件中第151行左右，添加如下代码：\n```javascript\nthis._canvas.style['background-color'] = '#f5f7f9'; // 背景颜色\nthis._canvas.style['background-image'] = 'url(./你的图片地址.png)'; //自定义背景图\n```\n\u003ca name=\"H9NrG\"\u003e\u003c/a\u003e\n## 其他\n欢迎各大神帮助一起优化XFun主题，GitHub仓库地址：[https://github.com/jianjunx/hexo-theme-xfun](https://github.com/jianjunx/hexo-theme-xfun)。\u003cbr /\u003e如果你用上了XFun主题记得在下方评论丢个链接展示一下。\u003cbr /\u003e\n\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"traditional\"\u003e\u003cp id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1598666814364-c2cb3a1b-c0b9-4cc7-94a0-d570c310d818.png\" width=\"2616\" id=\"qiGpX\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"0cd7eda7f5fe454fb2cfb341eab9da73\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e花了根据几天时间在官方landscape主题上修改并借鉴了next一些的风格，命名为XFun，虽说有些简陋，但是符合我喜欢的风格。:::\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"Installation\"\u003e\u003cspan class=\"ne-text\"\u003eInstallation\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"8f6e4564d5b041c40f02e4a3b37f2d69\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3 id=\"Install\"\u003e\u003cspan class=\"ne-text\"\u003eInstall\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"0ee3362785d1c88d63cce56d290fd4c0\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"ccf6a637\" class=\"ne-codeblock language-bash\"\u003e$ git clone https://github.com/jianjunx/hexo-theme-xfun.git themes/xfun\u003c/pre\u003e\u003cp id=\"836ede45a9170624f870aa74152d7b4a\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"4b409c889dec5a6aa1b91f91bca07a43\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003eXFun 的主题搜索依赖[hexo-generator-search]插件，请 hexo 项目中执行以下命令安装\u003c/span\u003e\u003c/p\u003e\u003cp id=\"313e5553dd4462fb2d132d8db22dd7a7\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"b84df87e\" class=\"ne-codeblock language-bash\"\u003e$ npm install hexo-generator-search --save\u003c/pre\u003e\u003cp id=\"995191dcdac082c88025123060088c04\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"b32ee714b863a67d0b5bf5d949fdca98\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e并在 hexo 的_config.yml(不是 xfun 主题里的那个)中添加如下配置\u003c/span\u003e\u003c/p\u003e\u003cp id=\"ea999dacf427cd1cfe26fe61dcd56bda\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"yaml\" id=\"8b541e97\" class=\"ne-codeblock language-yaml\"\u003esearch:\n  path: search.json\n  field: post\n  content: true\u003c/pre\u003e\u003cp id=\"ccc7b6f27a9aea4094ba644b5bab6f39\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"13525041c92f40d2ad47c21a8594db00\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e如果要启用 RSS 的话请先安装[hexo-generate-feed]\u003c/span\u003e\u003c/p\u003e\u003cp id=\"9da6321ca60dc4d19cc7907d78cf2b91\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"78f7d256\" class=\"ne-codeblock language-bash\"\u003e$ npm install hexo-generate-feed --save\u003c/pre\u003e\u003cp id=\"b1a1b16f7276501e2046880802c14937\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3 id=\"Enable\"\u003e\u003cspan class=\"ne-text\"\u003eEnable\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"cd799146fc2234a2e6293f815266ab54\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"a682bbf922f48b3e2a089dd16ec307c3\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e将hexo项目下  \u003c/span\u003e\u003ccode class=\"ne-code\"\u003e\u003cspan class=\"ne-text\"\u003e_config.yml\u003c/span\u003e\u003c/code\u003e\u003cspan class=\"ne-text\"\u003e 中的 \u003c/span\u003e\u003ccode class=\"ne-code\"\u003e\u003cspan class=\"ne-text\"\u003etheme\u003c/span\u003e\u003c/code\u003e\u003cspan class=\"ne-text\"\u003e 选项修改为 \u003c/span\u003e\u003ccode class=\"ne-code\"\u003e\u003cspan class=\"ne-text\"\u003exfun\u003c/span\u003e\u003c/code\u003e\u003cspan class=\"ne-text\"\u003e.\u003c/span\u003e\u003c/p\u003e\u003cp id=\"c13d56bb9b585671f07bd97befbe57f8\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3 id=\"Update\"\u003e\u003cspan class=\"ne-text\"\u003eUpdate\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"7a7844d8e48479e5bec4062cc4e9de67\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"e6293eca\" class=\"ne-codeblock language-bash\"\u003ecd themes/xfun\ngit pull\u003c/pre\u003e\u003cp id=\"75fc707f3ebb167eab38970a82c8aeae\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2 id=\"Configuration\"\u003e\u003cspan class=\"ne-text\"\u003eConfiguration\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"c9adc3a862169ae9cdebb20785c24578\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e全部配置如下：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"yaml\" id=\"P7jmB\" class=\"ne-codeblock language-yaml\"\u003e# Header\nmenu:\n  首页:\n    icon: icon-home # 字体图标类名，FontAwesome图标，在css/_partial/icons.styl定义\n    link: / # 链接地址\n\n# 配合hexo-generator-feed插件\nrss: /atom.xml \n\n# logo地址\nlogo: \n\n# Content\nexcerpt_link: 阅读全文\u0026gt;\u0026gt;\n\n# 图片预览\nfancybox: true\n\n# Sidebar\nsidebar: right\nwidgets:\n  - personal\n  # - category\n  # - tag\n  # - tagcloud\n  # - archive\n  # - recent_posts\n\n#个人信息栏设置\npersonal: \n  avatar: #头像地址\n  name: JJ Xie # 作者名\n  description: XFun. #描述\n\nlines: #个人信息栏下方的链接\n  标签: #名称\n    icon: icon-tags #图标类名\n    link: /tags\n  分类:\n    icon: icon-category\n    link: /categorys\n  XFun:\n    icon: icon-github\n    link: https://github.com/jianjunx/hexo-theme-xfun\n\nicons: #个人信息栏下方的图标按钮\n  GitHub:\n    icon: icon-github\n    link: https://github.com/jianjunx\n  微博:\n    icon: icon-weibo\n    link:\n  知乎:\n    icon: icon-zhihu\n    link: /\n  掘金:\n    icon: icon-juejin\n    link: /\n\nvaline:\n  appId: #valine leanClode appId\n  appKey: #valine leanClode appKey\n\n# widget behavior\narchive_type: 'monthly'\nshow_count: true\nribbon_flow: true #背景彩带\n\n#favicon.ico地址\nfavicon: \n\n# 右上角GitHub\ngithub: \u003c/pre\u003e\u003ch3 id=\"IvJ6G\"\u003e\u003cspan class=\"ne-text\"\u003e配置中的 icon\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"823c3e340c175fc8b9942dca57671633\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e配置中的icon合法的值是在主题中css/_partial/icons.styl 文件中定义的类名，具体方法如下：\u003c/span\u003e\u003c/p\u003e\u003col class=\"ne-ol\"\u003e\u003cli id=\"4bcd57f333c0fcadaf7ac3e556cc6c16\"\u003e\u003cspan class=\"ne-text\"\u003e去\u003c/span\u003e\u003ca href=\"https://fontawesome.dashgame.com/\" data-href=\"https://fontawesome.dashgame.com/\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003eFontAwesome\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e找到心仪的图标,选中按F12打开控制台。\u003c/span\u003e\u003c/li\u003e\u003cli id=\"3b3e5d9b6f59a8096ddf1d56490bac41\"\u003e\u003cspan class=\"ne-text\"\u003e在Element(元素)那里找到对应图标的i标签，如下：\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"b8321c899b4c9b6677bb9281ee4e8e94\" class=\"ne-p\" style=\"text-indent: 2em\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1598668538741-74816168-2800-469f-806a-a3f175577342.png\" width=\"1652\" id=\"Rr0FJ\" class=\"ne-image\"\u003e\u003c/p\u003e\u003col start=\"3\" class=\"ne-ol\"\u003e\u003cli id=\"8520b7365447d9dd95e0adf6226fbdc5\"\u003e\u003cspan class=\"ne-text\"\u003e在\u003c/span\u003e\u003cspan class=\"ne-text\"\u003ecss/_partial/icons.styl中新增类名\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre data-language=\"css\" id=\"VH25m\" class=\"ne-codeblock language-css\"\u003e.icon-weibo\n  font-style: normal\n  \u0026amp;:before \n    content: \u0026quot;\\f18a\u0026quot;; // 把上图2那里的一串放到这\n    font-family: FontAwesome;\n    font-size: 12px; // 调整图标大小\u003c/pre\u003e\u003col start=\"4\" class=\"ne-ol\"\u003e\u003cli id=\"0c8c644aae511ef5fb55bb56d97fc650\"\u003e\u003cspan class=\"ne-text\"\u003e在配置文件中使用\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre data-language=\"yaml\" id=\"IZ4uq\" class=\"ne-codeblock language-yaml\"\u003e微博:\n    icon: icon-weibo\n    link:\u003c/pre\u003e\u003cp id=\"d2d3be55f95cae13b0a6ffa11186774b\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3 id=\"IX5zJ\"\u003e\u003cspan class=\"ne-text\"\u003evaline配置\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"2a502f2daaa61497b24236f2e4a9bd8e\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e主题中自带了valine评论，这里只需要获取LeanCloud账号便可。\u003c/span\u003e\u003c/p\u003e\u003ch4 id=\"NvBpn\"\u003e\u003cspan class=\"ne-text\"\u003e获取APPID和APPKEY\u003c/span\u003e\u003c/h4\u003e\u003cp id=\"a2e1add4307dd317d05056f0c0a4f868\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e请先\u003c/span\u003e\u003ca href=\"https://leancloud.cn/dashboard/login.html#/signin\" data-href=\"https://leancloud.cn/dashboard/login.html#/signin\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e登录\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e或\u003c/span\u003e\u003ca href=\"https://leancloud.cn/dashboard/login.html#/signup\" data-href=\"https://leancloud.cn/dashboard/login.html#/signup\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e注册\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e \u003c/span\u003e\u003ccode class=\"ne-code\"\u003e\u003cspan class=\"ne-text\"\u003eLeanCloud\u003c/span\u003e\u003c/code\u003e\u003cspan class=\"ne-text\"\u003e, 进入\u003c/span\u003e\u003ca href=\"https://leancloud.cn/dashboard/applist.html#/apps\" data-href=\"https://leancloud.cn/dashboard/applist.html#/apps\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e控制台\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e后点击左下角\u003c/span\u003e\u003ca href=\"https://leancloud.cn/dashboard/applist.html#/newapp\" data-href=\"https://leancloud.cn/dashboard/applist.html#/newapp\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e创建应用\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e：\u003c/span\u003e\u003c/p\u003e\u003cp id=\"b8dcd7e34f638049dc675f29a8abe9c9\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/476855/1598669037918-9cecd486-2b10-4c8a-a714-02550121ea7d.jpeg\" width=\"616\" id=\"ZDeRa\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"e2b149bff2d77b67c436f36e81a35938\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e应用创建好以后，进入刚刚创建的应用，选择左下角的设置\u0026gt;应用Key，然后就能看到你的APP ID和APP Key了：\u003c/span\u003e\u003c/p\u003e\u003cp id=\"1cf2dbc72e8ec99295d0ba9cc37b7d35\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/476855/1598669070281-1098abe2-decc-4db0-b0cf-9f1e5988e534.jpeg\" width=\"1202\" id=\"ml9zg\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"4c794ff35aacb0818611bf034dd31b6e\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"c68d656123d41b19118d997a9a7b4d34\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e更多配置请参考\u003c/span\u003e\u003ca href=\"https://valine.js.org/quickstart.html\" data-href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003evaline\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003ch4 id=\"9zDtd\"\u003e\u003cspan class=\"ne-text\"\u003e关闭评论\u003c/span\u003e\u003c/h4\u003e\u003col class=\"ne-ol\"\u003e\u003cli id=\"7d0f17002313359e30b56a00a242a44d\"\u003e\u003cspan class=\"ne-text\"\u003e全局关闭：在主题配置文件中删除valine配置项\u003c/span\u003e\u003c/li\u003e\u003cli id=\"b3ef6466c82affa127c5f59a06952d44\"\u003e\u003cspan class=\"ne-text\"\u003e单个文章关闭：请在文章顶部(---内)添加 \u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #ef596f\"\u003ecomment\u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #bbbbbb\"\u003e:\u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #e2e6e9\"\u003e \u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #d8985f\"\u003efalse\u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #595959\"\u003e \u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #595959\"\u003e配置\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"48ecbd3473795e2dc2114d895155720e\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\" style=\"color: #595959\"\u003e\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"0o8P2\"\u003e\u003cspan class=\"ne-text\"\u003e文章版权信息\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"e9d4e6bd17ee6d22e957ce7f1cd88721\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e主题默认会为每个文章底部添加版权声明信息，如果某篇文章需要关闭该信息，请在文章顶部配置信息添加 \u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #ef596f\"\u003ecopyright\u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #bbbbbb\"\u003e:\u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #e2e6e9\"\u003e \u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #d8985f\"\u003efalse \u003c/span\u003e\u003cspan class=\"ne-text\"\u003e配置即可。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"8b19e6480130ac9375c93d1d7ac8059a\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3 id=\"QzJwo\"\u003e\u003cspan class=\"ne-text\"\u003eGitHub\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"3967b71d151c51edb1b0bfa4ad1477ff\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e在右上角添加Github图标 \u003c/span\u003e\u003cspan class=\"ne-text\" style=\"color: #ef596f\"\u003egithub: \u0026lt;you github url\u0026gt;\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"4Xxm9\"\u003e\u003cspan class=\"ne-text\"\u003eribbon_flow 背景彩带\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"4d21650f89afcd5e21fab35e9b80e828\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e这里是在网上找的一段代码，可以在_config.yml中选择开启或关闭。\u003c/span\u003e\u003c/p\u003e\u003ch4 id=\"msvbx\"\u003e\u003cspan class=\"ne-text\"\u003e调整背景色和图\u003c/span\u003e\u003c/h4\u003e\u003cp id=\"63d96a754f98e4eac40c5b2939eb3942\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e如果启用了ribbon_flow选项预想自定义背景颜色和图片就需要到主题中的source/js/ribbons.js文件中第151行左右，添加如下代码：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"fkytg\" class=\"ne-codeblock language-javascript\"\u003ethis._canvas.style['background-color'] = '#f5f7f9'; // 背景颜色\nthis._canvas.style['background-image'] = 'url(./你的图片地址.png)'; //自定义背景图\u003c/pre\u003e\u003ch2 id=\"H9NrG\"\u003e\u003cspan class=\"ne-text\"\u003e其他\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"6c5148dc13d6e8972118d07fb4c627af\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e欢迎各大神帮助一起优化XFun主题，GitHub仓库地址：\u003c/span\u003e\u003ca href=\"https://github.com/jianjunx/hexo-theme-xfun\" data-href=\"https://github.com/jianjunx/hexo-theme-xfun\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003ehttps://github.com/jianjunx/hexo-theme-xfun\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"6309a81f3be436694c72704de814501d\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e如果你用上了XFun主题记得在下方评论丢个链接展示一下。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"ff9a4bf61ae9afb739530c76d1e2e624\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-09T06:47:33.000Z",
      "deleted_at": "",
      "created_at": "2020-08-29T02:05:15.000Z",
      "updated_at": "2021-10-09T06:47:33.000Z",
      "word_count": 904,
      "path": "jianjunxie/kb/if3wr3",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    },
    {
      "id": 12355471,
      "slug": "ing0x6",
      "title": "学习webpack 写一个js代码打包工具",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "![截屏2020-08-29 下午9.40.11.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1598709499271-e0ec778d-1fe5-4987-819f-706e603283f8.png#height=934\u0026id=qdJjr\u0026margin=%5Bobject%20Object%5D\u0026name=%E6%88%AA%E5%B1%8F2020-08-29%20%E4%B8%8B%E5%8D%889.40.11.png\u0026originHeight=934\u0026originWidth=2112\u0026originalType=binary\u0026ratio=1\u0026size=158533\u0026status=done\u0026style=none\u0026width=2112)\u003cbr /\u003e\n\u003cbr /\u003ewebpack是一个用nodejs写的前端打包工具，从官网上的图片可以看出，可以将不同类型和总错复杂的依赖关系的文件打包成简单的浏览器可以认识的文件。:::_​_\n\u003ca name=\"Av1qh\"\u003e\u003c/a\u003e\n## 核心概念\nwebpack有入口、输出、loader、插件等几个重要的概念\n\u003ca name=\"EarHv\"\u003e\u003c/a\u003e\n### 入口（entry）\nwebpack打包的起点，用来分析依赖的入口。\n\u003ca name=\"C6DBc\"\u003e\u003c/a\u003e\n### 输出（output）\noutput 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。\n\u003ca name=\"MJhOf\"\u003e\u003c/a\u003e\n### loader\nwebpack 默认只能理解 JavaScript 和 JSON 文件。loader 可以让 webpack 能够去处理其他类型的文件，并将它们转换为有效模块，例如vue-loader可以让webpack去处理.vue文件。\n\u003ca name=\"WwnW0\"\u003e\u003c/a\u003e\n### 插件\nloader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。\u003cbr /\u003e\n\n\u003ca name=\"fx1LK\"\u003e\u003c/a\u003e\n## 分析打包后的文件\n我把一个简单的文件引用打包后的文件精简如下：\n```javascript\n(function (modules) {\n  // 存储执行过的模块\n  let installModules = {};\n\t/**\n   * 自定义require方法，打包时会把所有的require替换为__webpack_require__\n   * @param {*} moduleId 就是模块的相对路径名\n   */\n  function __webpack_require__(moduleId) {\n    if (installModules[moduleId]) {\n      return installModules[moduleId].exports;\n    }\n     // 初始化module对象\n    const module = (installModules[moduleId] = {\n      exports: {},\n    });\n\t\t// 根据传入的模块id调用模块\n    modules[moduleId].call(\n      module.exports,\n      module,\n      module.exports,\n      __webpack_require__,\n    );\n\n    return module.exports;\n  }\n\n  return __webpack_require__(\n    './src/index.js' /** 这里一般是入口文件 */,\n  );\n})(\n  {\n    './src/index.js': function (module, exports, __webpack_require__) {\n      eval(\n        \"const home = __webpack_require__('./src/home.js');\\n\\nfunction getHome() {\\n  return home;\\n}\\n\\nconsole.log(getHome());\\n\\nmodule.exports = {\\n  getHome,\\n  name: 'test webpack',\\n};\\n\",\n      );\n    },\n    './src/home.js': function (module, exports, __webpack_require__) {\n      eval(\n        \"const { hey } = __webpack_require__('./src/test.js');\\n\\nmodule.exports = { home: 'hell-home', hey };\\n\",\n      );\n    },\n    './src/test.js': function (module, exports, __webpack_require__) {\n      eval(\"exports.hey = function () {\\n  return 'hey 哥们';\\n};\\n\");\n    },\n  } /** 被替换成每个模块的内容，格式为一个对象key为路径，值为匿名函数里面使用eval包裹的文件代码 */,\n);\n\n```\n可以看到打包后的文件中有一个自执行函数，传入的是一个对象，对象的key为文件被require的路径，值为一个函数 里面有一个eval方法，我们的模块内容被打包成字符串放在了eval中。\u003cbr /\u003e自执行函数中有一个__webpack_require__方法，仔细看我们模块代码中的require方法都被替换成了__webpack_require__。\u003cbr /\u003e​\u003cbr /\u003e\n\u003ca name=\"rOig0\"\u003e\u003c/a\u003e\n## 自己写一个打包工具\n分析了webpack打包后的文件后，现在我们开始尝试自己写一个简单的打包工具。\n\u003ca name=\"QmKfr\"\u003e\u003c/a\u003e\n### 初始化项目\n在本地新建一个目录，我这里取名叫xpack，进入xpack目录执行如下命令初始化npm\n```bash\nnpm init -y\n```\n新增文件src目录，并创建 index.js和template.js\u003cbr /\u003e完整目录如下：\u003cbr /\u003esrc\n\n- index.js  // 主逻辑\n- template.js // 打包模板文件\n\npackage.json\u003cbr /\u003e\n\n\u003ca name=\"12tc2\"\u003e\u003c/a\u003e\n### index.js\n我这里就直接贴代码了，里面有详细的注释\n```javascript\n#!/usr/bin/env node\nconst path = require('path');\nconst fs = require('fs');\n\n// 默认配置\nconst defuaultConf = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n  },\n};\n// 合并配置文件\nconst config = Object.assign(\n  defuaultConf,\n  require(path.resolve('./xpack.config.js')),\n);\n\nclass Xpack {\n  constructor(config) {\n    this.config = config; // 保存配置项\n    this.entry = config.entry; // 保存配置项中的入口文件地址\n    this.root = process.cwd(); // 获取命令执行的目录\n    this.modules = {};\n  }\n  /**\n   * 代码解析和依赖分析\n   * @param {*} code 模块代码\n   * @param {*} parent 模块路径\n   */\n  parse(code, parent) {\n    const deps = []; // 依赖模块的路径\n    const r = /require\\('(.*)'\\)/g; // 正则匹配依赖模块\n    code = code.replace(r, function (match, arg) {\n      const retpath = path.join(parent, arg.replace(/'|\"/g), '');\n      deps.push(retpath);\n      return `__xpack__require__('./${retpath}')`;\n    });\n\n    return { deps, code };\n  }\n  generateMoudle() {\n    const temp = [];\n    // 将modules转成字符串\n    for (const [key, val] of Object.entries(this.modules)) {\n      temp.push(`'${key}' : ${val}`);\n    }\n    return `{${temp.join(',')}}`;\n  }\n  generateFile() {\n    // 读取模板文件\n    const template = fs.readFileSync(\n      path.resolve(__dirname, './template.js'),\n      'utf-8',\n    );\n    // 替换__modules_content__和__entry__\n    this.template = template\n      .replace('__entry__', this.entry)\n      .replace('__modules_content__', this.generateMoudle());\n\n    // 生成打包后的文件\n    fs.writeFileSync(\n      path.join('./dist', this.config.output.filename),\n      this.template,\n    );\n  }\n  /**\n   * 递归解析模块并按引入路径保存到modules\n   * @param {*} modulePath 模块的真实路径\n   * @param {*} name 模块地址\n   */\n  createModule(modulePath, name) {\n    // 读取模块文件内容，入口文件和require的文件\n    const moduleContent = fs.readFileSync(modulePath, 'utf-8');\n    // 解析读取的模块内容\n    const { code, deps } = this.parse(moduleContent, path.dirname(name));\n    /**\n     * 将模块代码存放到modules中，模块引入路径为key，模块中的代码用eval包裹\n     * eval可以将字符串当成js来执行，外面包裹的函数中传入了定义好的module, exports, __webpack_require__\n     * 当遇到commonjs模块导出时就换调用对应的参数\n     */\n    this.modules[name] = `function (module, exports, __webpack_require__) {\n      eval(\"${code.replace(/\\n/g, '\\\\n')}\")\n    }`;\n    // 循环依赖项，并调用this.createModule继续解析\n    deps.forEach((dep) =\u003e {\n      this.createModule(path.join(this.root, dep), `./${dep}`);\n    });\n  }\n  // 开始函数\n  start() {\n    const entryPath = path.resolve(this.root, this.entry);\n    this.createModule(entryPath, this.entry);\n    // console.log(this.modules);\n    this.generateFile();\n  }\n}\n\n// 初始化，并传入配置项\nconst xpack = new Xpack(config);\n\nxpack.start();\n\n```\n\u003ca name=\"2i4nC\"\u003e\u003c/a\u003e\n### template.js\n一样直接贴代码\n```javascript\n(function (modules) {\n  // 存储执行过的模块\n  let installModules = {};\n  /**\n   * 自定义require方法，打包时会把所有的require替换为__xpack_require__\n   * @param {*} moduleId 就是模块的相对路径名\n   */\n  function __xpack_require__(moduleId) {\n    if (installModules[moduleId]) {\n      return installModules[moduleId].exports;\n    }\n    // 初始化module对象\n    const module = (installModules[moduleId] = {\n      exports: {},\n    });\n    // 根据传入的模块id调用模块\n    modules[moduleId].call(\n      module.exports,\n      module,\n      module.exports,\n      __xpack_require__,\n    );\n\n    return module.exports;\n  }\n\n  return __xpack_require__(\n    '__entry__' /** 被替换成this.entry 配置项中的入口文件地址 */,\n  );\n})(\n  __modules_content__ /** 被替换成每个模块的内容，格式为一个对象key为路径，值为匿名函数里面使用eval包裹的文件代码 */,\n);\n\n```\n\u003ca name=\"mqlM8\"\u003e\u003c/a\u003e\n## 试用\n以上代码逻辑写好以后我们就可以看一下新打包工具的威力了，在这之前我们先做一些处理。\n\u003ca name=\"3jPlf\"\u003e\u003c/a\u003e\n### package.json\n在package.json中添加如下选项\n```json\n\"bin\": {\n    \"xpack\": \"./src/index.js\"\n  }\n```\n然后执行\n```bash\nnpm link\n```\n第一步的意思是，输入命令行指令 xpack后执行./src/index.js文件，这里注意index.js顶部要添加 _#!/usr/bin/env node _就是告诉系统可以在PATH目录中查找指令。​\u003cbr /\u003e第二步npm link是将当前这个npm包链接到全局，相当于npm install xpack -g ，这样就可以在命令行使用xpack指令了。\u003cbr /\u003e\n\n\u003ca name=\"VcStN\"\u003e\u003c/a\u003e\n### 打包\n我们新建一个测试项目，结构如下\u003cbr /\u003esrc\n\n- index.js\n- test.js\n\nxpack.config.js\u003cbr /\u003epackage.json\u003cbr /\u003e\n\u003cbr /\u003e随便写一些测试代码，然后执行xpack指令打包，不出意外就能正常打包了，完整的代码在[jianjunx/my-pack](https://github.com/jianjunx/my-pack)。\u003cbr /\u003e\n\u003cbr /\u003e\n\u003cbr /\u003e[:$前端,$工具,#webpack,#Nodejs:]\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"traditional\"\u003e\u003cp id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1598709499271-e0ec778d-1fe5-4987-819f-706e603283f8.png\" width=\"2112\" id=\"qdJjr\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"8eab2b3a876c91c1bb8f7e303fa9d340\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"968a48fa0f4e7e010075389b6d3ec372\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003ewebpack是一个用nodejs写的前端打包工具，从官网上的图片可以看出，可以将不同类型和总错复杂的依赖关系的文件打包成简单的浏览器可以认识的文件。:::\u003c/span\u003e\u003cem\u003e\u003cspan class=\"ne-text\"\u003e\u003c/span\u003e\u003c/em\u003e\u003c/p\u003e\u003ch2 id=\"Av1qh\"\u003e\u003cspan class=\"ne-text\"\u003e核心概念\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"1b9479ef867a1ab3c38f0014136e3d6e\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003ewebpack有入口、输出、loader、插件等几个重要的概念\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"EarHv\"\u003e\u003cspan class=\"ne-text\"\u003e入口（entry）\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"69babb393f9ec29869b1b0c99ecd32a6\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003ewebpack打包的起点，用来分析依赖的入口。\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"C6DBc\"\u003e\u003cspan class=\"ne-text\"\u003e输出（output）\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"940e0bb555e284acc946079ccfe83610\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003eoutput 属性告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹中。\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"MJhOf\"\u003e\u003cspan class=\"ne-text\"\u003eloader\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"abd81ca30f8e0dbd7708a080b56d77ac\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003ewebpack 默认只能理解 JavaScript 和 JSON 文件。loader 可以让 webpack 能够去处理其他类型的文件，并将它们转换为有效模块，例如vue-loader可以让webpack去处理.vue文件。\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"WwnW0\"\u003e\u003cspan class=\"ne-text\"\u003e插件\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"ee552699f129660dbfaf64800a5e3c0a\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003eloader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"9b53d7e162065b5073f90fcbe592f9d2\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2 id=\"fx1LK\"\u003e\u003cspan class=\"ne-text\"\u003e分析打包后的文件\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"5e1e225eb6cb2ff502ac4d491c8b384d\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e我把一个简单的文件引用打包后的文件精简如下：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"MgBKJ\" class=\"ne-codeblock language-javascript\"\u003e(function (modules) {\n  // 存储执行过的模块\n  let installModules = {};\n\t/**\n   * 自定义require方法，打包时会把所有的require替换为__webpack_require__\n   * @param {*} moduleId 就是模块的相对路径名\n   */\n  function __webpack_require__(moduleId) {\n    if (installModules[moduleId]) {\n      return installModules[moduleId].exports;\n    }\n     // 初始化module对象\n    const module = (installModules[moduleId] = {\n      exports: {},\n    });\n\t\t// 根据传入的模块id调用模块\n    modules[moduleId].call(\n      module.exports,\n      module,\n      module.exports,\n      __webpack_require__,\n    );\n\n    return module.exports;\n  }\n\n  return __webpack_require__(\n    './src/index.js' /** 这里一般是入口文件 */,\n  );\n})(\n  {\n    './src/index.js': function (module, exports, __webpack_require__) {\n      eval(\n        \u0026quot;const home = __webpack_require__('./src/home.js');\\n\\nfunction getHome() {\\n  return home;\\n}\\n\\nconsole.log(getHome());\\n\\nmodule.exports = {\\n  getHome,\\n  name: 'test webpack',\\n};\\n\u0026quot;,\n      );\n    },\n    './src/home.js': function (module, exports, __webpack_require__) {\n      eval(\n        \u0026quot;const { hey } = __webpack_require__('./src/test.js');\\n\\nmodule.exports = { home: 'hell-home', hey };\\n\u0026quot;,\n      );\n    },\n    './src/test.js': function (module, exports, __webpack_require__) {\n      eval(\u0026quot;exports.hey = function () {\\n  return 'hey 哥们';\\n};\\n\u0026quot;);\n    },\n  } /** 被替换成每个模块的内容，格式为一个对象key为路径，值为匿名函数里面使用eval包裹的文件代码 */,\n);\n\u003c/pre\u003e\u003cp id=\"a72fc94124f234c58ff1bc0dba05ac93\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e可以看到打包后的文件中有一个自执行函数，传入的是一个对象，对象的key为文件被require的路径，值为一个函数 里面有一个eval方法，我们的模块内容被打包成字符串放在了eval中。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"5a4c83c52fb29758596413fb4dbaa4d9\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e自执行函数中有一个__webpack_require__方法，仔细看我们模块代码中的\u003c/span\u003e\u003cspan class=\"ne-text\"\u003erequire方法都被替换成了\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e__webpack_require__。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"4b48b1a1f510f09d33e0422c734d4632\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"rOig0\"\u003e\u003cspan class=\"ne-text\"\u003e自己写一个打包工具\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"4145b5bd03f07abedca32278b8c466c8\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e分析了webpack打包后的文件后，现在我们开始尝试自己写一个简单的打包工具。\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"QmKfr\"\u003e\u003cspan class=\"ne-text\"\u003e初始化项目\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"187deeccef9bc9ebefe98b9a23e3d9de\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e在本地新建一个目录，我这里取名叫xpack，进入xpack目录执行如下命令初始化npm\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"JU5md\" class=\"ne-codeblock language-bash\"\u003enpm init -y\u003c/pre\u003e\u003cp id=\"c0d036f4893e78afcd9f9c26c32ae69f\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e新增文件src目录，并创建 index.js和template.js\u003c/span\u003e\u003c/p\u003e\u003cp id=\"f14fee3e1c22614e7b170fd69f367605\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e完整目录如下：\u003c/span\u003e\u003c/p\u003e\u003cp id=\"67a371a953f54ec7f80d743fcb97714b\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003esrc\u003c/span\u003e\u003c/p\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"edcfb0229b89c525e8c8cb631cf624f7\"\u003e\u003cspan class=\"ne-text\"\u003eindex.js  // 主逻辑\u003c/span\u003e\u003c/li\u003e\u003cli id=\"384fedc9a3e093f488230a0b49f0330f\"\u003e\u003cspan class=\"ne-text\"\u003etemplate.js // 打包模板文件\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"025ec23549960b155c137ceda88053f1\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003epackage.json\u003c/span\u003e\u003c/p\u003e\u003cp id=\"ac3c76ab2e05a57e8f2f1b691e4a356f\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3 id=\"12tc2\"\u003e\u003cspan class=\"ne-text\"\u003eindex.js\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"79040938cb3cf180b2996cf57919726c\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e我这里就直接贴代码了，里面有详细的注释\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"lTuVM\" class=\"ne-codeblock language-javascript\"\u003e#!/usr/bin/env node\nconst path = require('path');\nconst fs = require('fs');\n\n// 默认配置\nconst defuaultConf = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n  },\n};\n// 合并配置文件\nconst config = Object.assign(\n  defuaultConf,\n  require(path.resolve('./xpack.config.js')),\n);\n\nclass Xpack {\n  constructor(config) {\n    this.config = config; // 保存配置项\n    this.entry = config.entry; // 保存配置项中的入口文件地址\n    this.root = process.cwd(); // 获取命令执行的目录\n    this.modules = {};\n  }\n  /**\n   * 代码解析和依赖分析\n   * @param {*} code 模块代码\n   * @param {*} parent 模块路径\n   */\n  parse(code, parent) {\n    const deps = []; // 依赖模块的路径\n    const r = /require\\('(.*)'\\)/g; // 正则匹配依赖模块\n    code = code.replace(r, function (match, arg) {\n      const retpath = path.join(parent, arg.replace(/'|\u0026quot;/g), '');\n      deps.push(retpath);\n      return `__xpack__require__('./${retpath}')`;\n    });\n\n    return { deps, code };\n  }\n  generateMoudle() {\n    const temp = [];\n    // 将modules转成字符串\n    for (const [key, val] of Object.entries(this.modules)) {\n      temp.push(`'${key}' : ${val}`);\n    }\n    return `{${temp.join(',')}}`;\n  }\n  generateFile() {\n    // 读取模板文件\n    const template = fs.readFileSync(\n      path.resolve(__dirname, './template.js'),\n      'utf-8',\n    );\n    // 替换__modules_content__和__entry__\n    this.template = template\n      .replace('__entry__', this.entry)\n      .replace('__modules_content__', this.generateMoudle());\n\n    // 生成打包后的文件\n    fs.writeFileSync(\n      path.join('./dist', this.config.output.filename),\n      this.template,\n    );\n  }\n  /**\n   * 递归解析模块并按引入路径保存到modules\n   * @param {*} modulePath 模块的真实路径\n   * @param {*} name 模块地址\n   */\n  createModule(modulePath, name) {\n    // 读取模块文件内容，入口文件和require的文件\n    const moduleContent = fs.readFileSync(modulePath, 'utf-8');\n    // 解析读取的模块内容\n    const { code, deps } = this.parse(moduleContent, path.dirname(name));\n    /**\n     * 将模块代码存放到modules中，模块引入路径为key，模块中的代码用eval包裹\n     * eval可以将字符串当成js来执行，外面包裹的函数中传入了定义好的module, exports, __webpack_require__\n     * 当遇到commonjs模块导出时就换调用对应的参数\n     */\n    this.modules[name] = `function (module, exports, __webpack_require__) {\n      eval(\u0026quot;${code.replace(/\\n/g, '\\\\n')}\u0026quot;)\n    }`;\n    // 循环依赖项，并调用this.createModule继续解析\n    deps.forEach((dep) =\u0026gt; {\n      this.createModule(path.join(this.root, dep), `./${dep}`);\n    });\n  }\n  // 开始函数\n  start() {\n    const entryPath = path.resolve(this.root, this.entry);\n    this.createModule(entryPath, this.entry);\n    // console.log(this.modules);\n    this.generateFile();\n  }\n}\n\n// 初始化，并传入配置项\nconst xpack = new Xpack(config);\n\nxpack.start();\n\u003c/pre\u003e\u003ch3 id=\"2i4nC\"\u003e\u003cspan class=\"ne-text\"\u003etemplate.js\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"5b36996c41aa4a038c1ab9ca4859058e\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e一样直接贴代码\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"j4dZn\" class=\"ne-codeblock language-javascript\"\u003e(function (modules) {\n  // 存储执行过的模块\n  let installModules = {};\n  /**\n   * 自定义require方法，打包时会把所有的require替换为__xpack_require__\n   * @param {*} moduleId 就是模块的相对路径名\n   */\n  function __xpack_require__(moduleId) {\n    if (installModules[moduleId]) {\n      return installModules[moduleId].exports;\n    }\n    // 初始化module对象\n    const module = (installModules[moduleId] = {\n      exports: {},\n    });\n    // 根据传入的模块id调用模块\n    modules[moduleId].call(\n      module.exports,\n      module,\n      module.exports,\n      __xpack_require__,\n    );\n\n    return module.exports;\n  }\n\n  return __xpack_require__(\n    '__entry__' /** 被替换成this.entry 配置项中的入口文件地址 */,\n  );\n})(\n  __modules_content__ /** 被替换成每个模块的内容，格式为一个对象key为路径，值为匿名函数里面使用eval包裹的文件代码 */,\n);\n\u003c/pre\u003e\u003ch2 id=\"mqlM8\"\u003e\u003cspan class=\"ne-text\"\u003e试用\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"f6554165db5e4c6e54ab78a2b81b6c23\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e以上代码逻辑写好以后我们就可以看一下新打包工具的威力了，在这之前我们先做一些处理。\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"3jPlf\"\u003e\u003cspan class=\"ne-text\"\u003epackage.json\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"7229d972ede000ef851ed48d9272b81a\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e在package.json中添加如下选项\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"json\" id=\"Fzgau\" class=\"ne-codeblock language-json\"\u003e\u0026quot;bin\u0026quot;: {\n    \u0026quot;xpack\u0026quot;: \u0026quot;./src/index.js\u0026quot;\n  }\u003c/pre\u003e\u003cp id=\"0381a7fd6ce6bb85c2cd479946294761\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e然后执行\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"3XAg5\" class=\"ne-codeblock language-bash\"\u003enpm link\u003c/pre\u003e\u003cp id=\"40865b1fb56d2dcb0b473b940d72eebe\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e第一步的意思是，\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e输入命令行指令 xpack后执行./src/index.js文件，这里注意index.js顶部要添加\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e \u003c/span\u003e\u003cem\u003e\u003cspan class=\"ne-text\"\u003e#!/usr/bin/env node \u003c/span\u003e\u003c/em\u003e\u003cspan class=\"ne-text\"\u003e就是告诉系统可以在PATH目录中查找指令。\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e\u003c/span\u003e\u003c/p\u003e\u003cp id=\"ccf908736296507a7462f27a79de151b\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e第二步npm link是将当前这个npm包链接到全局，相当于npm install \u003c/span\u003e\u003cspan class=\"ne-text\"\u003expack\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e -g ，这样就可以在命令行使用xpack指令了。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"d2381452cbb9518137d107deed7ea529\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch3 id=\"VcStN\"\u003e\u003cspan class=\"ne-text\"\u003e打包\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"c6e050bd0e9b9ac4220ff032447ec65d\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e我们新建一个测试项目，结构如下\u003c/span\u003e\u003c/p\u003e\u003cp id=\"72311d92732c6673c78a198a4b6b5e91\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003esrc\u003c/span\u003e\u003c/p\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"54c24b7b115a15d2fb077cd60db83dd4\"\u003e\u003cspan class=\"ne-text\"\u003eindex.js\u003c/span\u003e\u003c/li\u003e\u003cli id=\"ceef99159f723701f6e1771e55eebd70\"\u003e\u003cspan class=\"ne-text\"\u003etest.js\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"7ec1ce53a8f9e924ae293e94c31bb15c\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003expack.config.js\u003c/span\u003e\u003c/p\u003e\u003cp id=\"ec3b85a6b55935b7f3119c2a6abfebfa\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003epackage.json\u003c/span\u003e\u003c/p\u003e\u003cp id=\"f41d8e961236cbad883a8b1f67232854\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"aa43b06f6aa5cc34fdd42f817644dbb8\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e随便写一些测试代码，然后执行xpack指令打包，不出意外就能正常打包了，完整的代码在\u003c/span\u003e\u003ca href=\"https://github.com/jianjunx/my-pack\" data-href=\"https://github.com/jianjunx/my-pack\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003ejianjunx/my-pack\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"8f189a6bf6ed4941008188f6ab82d1db\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"07eeffcdb747cba75016eb4932e41a9c\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"ff5cd351937877d203f904f0c0e11dfa\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e[:$前端,$工具,#webpack,#Nodejs:]\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-08T09:14:35.000Z",
      "deleted_at": "",
      "created_at": "2020-08-29T09:32:53.000Z",
      "updated_at": "2021-10-08T09:14:35.000Z",
      "word_count": 1675,
      "path": "jianjunxie/kb/ing0x6",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    },
    {
      "id": 13080273,
      "slug": "daetgu",
      "title": "V2RAY一键带deception方案",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "![image.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1599904973131-a16d23f0-29ce-4955-9231-73d384c57b86.png#height=387\u0026id=XRI4O\u0026margin=%5Bobject%20Object%5D\u0026name=image.png\u0026originHeight=774\u0026originWidth=1630\u0026originalType=binary\u0026ratio=1\u0026size=1739250\u0026status=done\u0026style=none\u0026width=815)\u003cbr /\u003e这是一个教你一键安装V2RAY的教程，网上有很多类似的教程，这里只是收藏一份，防走丢。:::\n\u003ca name=\"6hV3q\"\u003e\u003c/a\u003e\n## 使用教程\n1. 如果vps运营商默认开启了防火墙（阿里云、google云等默认开启，搬瓦工/hostdare/vultr默认放行所有端口），请先登录vps管理后台放行80和443端口，否则可能无法正确获得证书导致脚本失败；\u003cbr /\u003e2. 登录到服务器，在终端（黑框框）输入如下命令：\n```bash\nbash \u003c(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/ubuntu_install_v2ray2.sh)\n```\n按回车键，屏幕上开始滚动各种看得懂看不懂的东西。紧盯着屏幕，直到屏幕出现“**确认满足按y，按其他退出脚本：**”，确认条件满足，按y回车，然后**输入你域名的主机名**（注意是主机名，比如www.hijk.pw，**最好不要填裸域名**hijk.pw！），以及设置一个**伪装路径（不能是/）**，例如/abcedf（强烈建议设置一个复杂的、别人猜不到的路径，**除 “数字、字母、/、-、_” 外不能有其他特殊字符！**）。\u003cbr /\u003e接下来脚本会自动疯狂运行，直到屏幕上出现安装成功的提示。**如果安装过程卡住，请耐心等待几分钟；**如果期间网络断开（windows上表现为黑框框中或者顶部标题出现disconnected字样，mac表现为终端出现“closed by remote host”或”broken pipe”），请重新连接后再次执行命令。脚本运行成功会输出配置信息，截图如下：\u003cbr /\u003e![WX20200912-174853@2x.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1599904224625-e69085ae-f92f-475c-ab62-73eab31a97d4.png#height=944\u0026id=u0v8p\u0026margin=%5Bobject%20Object%5D\u0026name=WX20200912-174853%402x.png\u0026originHeight=944\u0026originWidth=1596\u0026originalType=binary\u0026ratio=1\u0026size=371172\u0026status=done\u0026style=none\u0026width=1596)\u003cbr /\u003e**到此服务端配置完毕**，服务器可能会自动重启，windows终端出现“disconnected”，mac出现“closed by remote host”说明服务器成功重启了，**如果没提示重启则不需要**。\n\u003ca name=\"MWcXN\"\u003e\u003c/a\u003e\n## 可能出现的问题\n1. 多次运行一键脚本，安装过程中会出现如下提示：\n```bash\nWhat would you like to do? \n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n1: Keep the existing certificate for now \n2: Renew \u0026 replace the cert (limit ~5 per 7 days) \n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel):\n```\n**输入1，回车即可。**\u003cbr /\u003e2. 如果提示证书失败，终端出现如下提示：\n```bash\nAn unexpected error occurred: \nThere were too many requests of a given type :: Error creating new order :: too many certificates already issued for exact set of domains:test2.hijk.pw: \nsee https://letsencrypt.org/docs/rate-limits/\n```\n说明这个主机名近期申请过太多次免费证书，请换一个主机名尝试，例如test2.hijk.pw 换成 test3.hijk.pw（需要到dns控制台添加解析）。\n\u003ca name=\"XuwEH\"\u003e\u003c/a\u003e\n## 如何判断服务端已经正常运行？\n操作如下：\u003cbr /\u003e1. 浏览器输入域名，打开是一个随机小说网站。注意：小说网站是本人在网上随机找的，如果出现下面的错误也是正常的：\u003cbr /\u003e![WX20200912-175111@2x.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1599904293657-75d8da4e-311d-41ae-8f05-4239cfc9f695.png#height=1126\u0026id=cQDhf\u0026margin=%5Bobject%20Object%5D\u0026name=WX20200912-175111%402x.png\u0026originHeight=1126\u0026originWidth=1456\u0026originalType=binary\u0026ratio=1\u0026size=669759\u0026status=done\u0026style=none\u0026width=1456)\u003cbr /\u003e2. 输入域名加伪装路径，出现”bad request”。\u003cbr /\u003e如果这两个现象都是预期的，说明服务端一切正常，有问题请检查客户端配置。**注意：**某些系统因为一些原因，打开域名显示”403 forbidden”，但是打开域名加伪装路径出现“bad request”，这也说明服务端是正常的。\n\u003ca name=\"k2WWa\"\u003e\u003c/a\u003e\n## 客户端下载\n接下来是**最后一步**：下载客户端：\u003cbr /\u003e[V2RAY各版本客户端](https://jianjun.fun/p/hvryle.html)\u003cbr /\u003e下载客户端配置好后，就可以愉快的上网了！\n\u003ca name=\"KiuIh\"\u003e\u003c/a\u003e\n## 其他\n1. 查看v2ray运行状态/配置：\n```bash\nbash \u003c(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/ubuntu_install_v2ray2.sh) info\n```\n2. v2ray管理命令\u003cbr /\u003e启动：\n```bash\nsystemctl start v2ray\n```\n停止：\n```bash\nsystemctl stop v2ray\n```\n重启：\n```bash\nsystemctl restart v2ray\n```\n3. nginx管理命令\n\n- 测试配置文件有无错误：\n```bash\nnginx -t\n```\n\n- 启动：\n```bash\nsystemctl start nginx\n```\n\n- 停止：\n```bash\nsystemct stop nginx\n```\n\n- 重启：\n```bash\nsystemctl restart nginx\n```\n4. 更新v2ray到最新版：重新运行一键脚本\u003cbr /\u003e5. 卸载命令： \n```bash\nbash \u003c(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/ubuntu_install_v2ray2.sh) uninstall\n```\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"classic\"\u003e\u003cp id=\"9c219c1353fcab8e67e4b6aa97347ac8\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1599904973131-a16d23f0-29ce-4955-9231-73d384c57b86.png\" width=\"815\" id=\"XRI4O\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"a29344263cd6bba7d846cbc3a5e5149a\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e这是一个教你一键安装V2RAY的教程，网上有很多类似的教程，这里只是收藏一份，防走丢。:::\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"6hV3q\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e使用教程\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"88f806491317fe73f0fec6911fd8f65e\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e1. 如果vps运营商默认开启了防火墙（阿里云、google云等默认开启，搬瓦工/hostdare/vultr默认放行所有端口），请先登录vps管理后台放行80和443端口，否则可能无法正确获得证书导致脚本失败；\u003c/span\u003e\u003c/p\u003e\u003cp id=\"468d2a24261c3b1b1a3579db811a658a\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e2. 登录到服务器，在终端（黑框框）输入如下命令：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"CRk7Q\" class=\"ne-codeblock language-bash\"\u003ebash \u0026lt;(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/ubuntu_install_v2ray2.sh)\u003c/pre\u003e\u003cp id=\"2058a1d81a84e32f64e420762fdec70a\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e按回车键，屏幕上开始滚动各种看得懂看不懂的东西。紧盯着屏幕，直到屏幕出现“\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e确认满足按y，按其他退出脚本：\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e”，确认条件满足，按y回车，然后\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e输入你域名的主机名\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e（注意是主机名，比如www.hijk.pw，\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e最好不要填裸域名\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003ehijk.pw！），以及设置一个\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e伪装路径（不能是/）\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e，例如/abcedf（强烈建议设置一个复杂的、别人猜不到的路径，\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e除 “数字、字母、/、-、_” 外不能有其他特殊字符！\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e）。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"085ae944d77e5a8ed73088dd0f3c9b07\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e接下来脚本会自动疯狂运行，直到屏幕上出现安装成功的提示。\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e如果安装过程卡住，请耐心等待几分钟；\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e如果期间网络断开（windows上表现为黑框框中或者顶部标题出现disconnected字样，mac表现为终端出现“closed by remote host”或”broken pipe”），请重新连接后再次执行命令。脚本运行成功会输出配置信息，截图如下：\u003c/span\u003e\u003c/p\u003e\u003cp id=\"731631c333be4e99e9ca09a4b90d91fc\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1599904224625-e69085ae-f92f-475c-ab62-73eab31a97d4.png\" width=\"1596\" id=\"u0v8p\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"81ed683bf46a9761d822407283ccb357\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e到此服务端配置完毕\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e，服务器可能会自动重启，windows终端出现“disconnected”，mac出现“closed by remote host”说明服务器成功重启了，\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e如果没提示重启则不需要\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e。\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"MWcXN\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e可能出现的问题\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"30b327c10ca35d9fa04b9b13fbbc36eb\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e1. 多次运行一键脚本，安装过程中会出现如下提示：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"1OBPS\" class=\"ne-codeblock language-bash\"\u003eWhat would you like to do? \n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \n1: Keep the existing certificate for now \n2: Renew \u0026amp; replace the cert (limit ~5 per 7 days) \n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel):\u003c/pre\u003e\u003cp id=\"5ff21850ca066e6ff50753ad2e36eb9a\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e输入1，回车即可。\u003c/span\u003e\u003c/strong\u003e\u003c/p\u003e\u003cp id=\"1ebeb374c2ca1acfc605318c5c39c686\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e2. 如果提示证书失败，终端出现如下提示：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"c5uw9\" class=\"ne-codeblock language-bash\"\u003eAn unexpected error occurred: \nThere were too many requests of a given type :: Error creating new order :: too many certificates already issued for exact set of domains:test2.hijk.pw: \nsee https://letsencrypt.org/docs/rate-limits/\u003c/pre\u003e\u003cp id=\"6670c57ce926cc404470ae4279d8e788\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e说明这个主机名近期申请过太多次免费证书，请换一个主机名尝试，例如test2.hijk.pw 换成 test3.hijk.pw（需要到dns控制台添加解析）。\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"XuwEH\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e如何判断服务端已经正常运行？\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"efa308740d4388ef699771c6810b38ae\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e操作如下：\u003c/span\u003e\u003c/p\u003e\u003cp id=\"ffb1496ebcea70849b363bff6ba42bc6\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e1. 浏览器输入域名，打开是一个随机小说网站。注意：小说网站是本人在网上随机找的，如果出现下面的错误也是正常的：\u003c/span\u003e\u003c/p\u003e\u003cp id=\"ca5f59b64312eb21f22941ebe33bfefb\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1599904293657-75d8da4e-311d-41ae-8f05-4239cfc9f695.png\" width=\"1456\" id=\"cQDhf\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"b50f9464911fba209722d1a78e7f6a3a\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e2. 输入域名加伪装路径，出现”bad request”。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"3415d709605ca8d48ff9c18ba1376c0c\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e如果这两个现象都是预期的，说明服务端一切正常，有问题请检查客户端配置。\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e注意：\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e某些系统因为一些原因，打开域名显示”403 forbidden”，但是打开域名加伪装路径出现“bad request”，这也说明服务端是正常的。\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"k2WWa\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e客户端下载\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"4ffef4d9ad433f86b5cb0f940b4b4a3e\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e接下来是\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e最后一步\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e：下载客户端：\u003c/span\u003e\u003c/p\u003e\u003cp id=\"798cf538d141c582def089c22eb0bc0b\" class=\"ne-p\"\u003e\u003ca href=\"https://jianjun.fun/p/hvryle.html\" data-href=\"https://jianjun.fun/p/hvryle.html\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003eV2RAY各版本客户端\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"4ef7a815689aae1fe38013308a66baa5\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e下载客户端配置好后，就可以愉快的上网了！\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"KiuIh\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e其他\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"44d457212f5485ae1d53cc513692a202\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e1. 查看v2ray运行状态/配置：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"HExlH\" class=\"ne-codeblock language-bash\"\u003ebash \u0026lt;(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/ubuntu_install_v2ray2.sh) info\u003c/pre\u003e\u003cp id=\"d73522b0616c39d7f8c6cdbda9864daa\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e2. v2ray管理命令\u003c/span\u003e\u003c/p\u003e\u003cp id=\"c52af413b8f4fa995934430ae2efde91\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e启动：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"UUqLA\" class=\"ne-codeblock language-bash\"\u003esystemctl start v2ray\u003c/pre\u003e\u003cp id=\"9db3414d71ae7d7e3563b390695c3c50\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e停止：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"9F4lg\" class=\"ne-codeblock language-bash\"\u003esystemctl stop v2ray\u003c/pre\u003e\u003cp id=\"94dbb8a38bd77a8b9a4519f34eb91353\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e重启：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"MrtID\" class=\"ne-codeblock language-bash\"\u003esystemctl restart v2ray\u003c/pre\u003e\u003cp id=\"9ea854e9bccc12e57904dbd1ef5fb1f6\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e3. nginx管理命令\u003c/span\u003e\u003c/p\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"931935cea58ef198b4c9383b7d65ed07\"\u003e\u003cspan class=\"ne-text\"\u003e测试配置文件有无错误：\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre data-language=\"bash\" id=\"4ZXBf\" class=\"ne-codeblock language-bash\"\u003enginx -t\u003c/pre\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"a48aa3cc4f5d7e4200527254d9ee1985\"\u003e\u003cspan class=\"ne-text\"\u003e启动：\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre data-language=\"bash\" id=\"28pDQ\" class=\"ne-codeblock language-bash\"\u003esystemctl start nginx\u003c/pre\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"73fe5a74c067c27b842522561a5d4014\"\u003e\u003cspan class=\"ne-text\"\u003e停止：\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre data-language=\"bash\" id=\"G6oTN\" class=\"ne-codeblock language-bash\"\u003esystemct stop nginx\u003c/pre\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"650e5ad416fdeef51c2dd50449e4630f\"\u003e\u003cspan class=\"ne-text\"\u003e重启：\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre data-language=\"bash\" id=\"mqoL8\" class=\"ne-codeblock language-bash\"\u003esystemctl restart nginx\u003c/pre\u003e\u003cp id=\"c5cd2a4b47df528916735f084b589e4e\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e4. 更新v2ray到最新版：重新运行一键脚本\u003c/span\u003e\u003c/p\u003e\u003cp id=\"efd9fd760f7d9364e550ac1cb64925cc\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e5. 卸载命令： \u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"XP7QR\" class=\"ne-codeblock language-bash\"\u003ebash \u0026lt;(curl -sL https://raw.githubusercontent.com/hijkpw/scripts/master/ubuntu_install_v2ray2.sh) uninstall\u003c/pre\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-09T06:48:01.000Z",
      "deleted_at": "",
      "created_at": "2020-09-12T09:41:53.000Z",
      "updated_at": "2021-10-09T06:48:02.000Z",
      "word_count": 1100,
      "path": "jianjunxie/kb/daetgu",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    },
    {
      "id": 11769120,
      "slug": "ya7h3c",
      "title": "Linux下git自动保存用户名和密码",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "最近换了系统，安装好git在每次代码提交的时候总是提示要重复输入用户名和密码，可以通过以下两条命令来解决这个问题。\n\n- 按项目设置\n```bash\ngit config credential.helper store  \n```\n\n- 全局设置\n```bash\ngit config credential.helper store --global\n```\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"traditional\"\u003e\u003cp id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\" style=\"color: #666666; font-size: 16px\"\u003e最近换了系统，安装好git在每次代码提交的时候总是提示要重复输入用户名和密码，可以通过以下两条命令来解决这个问题。\u003c/span\u003e\u003c/p\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"d94d547cd4380ab9094dca656db52da4\"\u003e\u003cspan class=\"ne-text\"\u003e按项目设置\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre data-language=\"bash\" id=\"WRrt0\" class=\"ne-codeblock language-bash\"\u003egit config credential.helper store  \u003c/pre\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"770664a958d7a7ea36a6154728a3cf34\"\u003e\u003cspan class=\"ne-text\" style=\"color: #666666; font-size: 16px\"\u003e全局设置\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cpre data-language=\"bash\" id=\"Xz5Rp\" class=\"ne-codeblock language-bash\"\u003egit config credential.helper store --global\u003c/pre\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-09T06:47:01.000Z",
      "deleted_at": "",
      "created_at": "2020-08-17T06:31:45.000Z",
      "updated_at": "2021-10-09T06:47:01.000Z",
      "word_count": 74,
      "path": "jianjunxie/kb/ya7h3c",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    },
    {
      "id": 13080670,
      "slug": "hvryle",
      "title": "V2RAY各版本客户端",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "![image.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1599904973131-a16d23f0-29ce-4955-9231-73d384c57b86.png#height=387\u0026id=zA7Q0\u0026margin=%5Bobject%20Object%5D\u0026name=image.png\u0026originHeight=774\u0026originWidth=1630\u0026originalType=binary\u0026ratio=1\u0026size=1739250\u0026status=done\u0026style=none\u0026width=815)\u003cbr /\u003eV2Ray核心不区分客户端和服务端，因此V2Ray官方未提供各平台的GUI客户端。许多第三方开发人员基于V2Ray核心开发了适用于各平台的GUI客户端，因此每个平台均有多个客户端可供选择。这里收集了v2ray各端客户端版本的介绍和下载，这里只是收藏避免用的时候找不到。:::\u003cbr /\u003e\n\n\u003ca name=\"ksojb\"\u003e\u003c/a\u003e\n## Windows客户端\n最新版v2ray Windows客户端下载链接：\n\n- V2RayN：[官方下载](https://github.com/2dust/v2rayN/releases)  \n- V2RayW：[官方下载](https://github.com/Cenmrev/V2RayW/releases)\n- V2RayS：[官方下载](https://github.com/Shinlor/V2RayS/releases)\n- Clash：[官方下载](https://github.com/Fndroid/clash_for_windows_pkg/releases)\n\n**Windows系统建议使用V2rayN**，界面简洁大气且支持Vmess和Shadowsocks。V2rayW界面配置不支持SS，V2rayS不支持高级传输层设置。Clash基于Yaml语法且纯英文界面，对Clash不了解或新手不建议使用。\n\u003ca name=\"VbXjl\"\u003e\u003c/a\u003e\n## 安卓客户端\n最新版安卓客户端下载\n\n- V2RayNG：[官网下载](https://github.com/2dust/v2rayNG/releases)\n- BifrostV：[官网下载](https://apkpure.com/bifrostv/com.github.dawndiy.bifrostv)\n\u003ca name=\"Tv8jt\"\u003e\u003c/a\u003e\n## Mac客户端\n最新版Mac客户端\n\n- V2RayU： [官网下载链接](https://github.com/yanue/V2rayU/releases)\n- V2RayX：[官网下载链接](https://github.com/Cenmrev/V2RayX/releases)\n- ClashX：[官网下载链接](https://github.com/yichengchen/clashX/releases)\n\n**Mac OS X系统建议使用V2rayU**，有中文界面且支持vmess/shadowsocks/socks协议。V2rayX没有中文界面，gui界面不支持shadowsocks协议。ClashX是基于Clash的一个gui客户端，用yaml语法配置规则操控软件行为，不建议新手使用。\u003cbr /\u003e\n\n\u003ca name=\"RhyW5\"\u003e\u003c/a\u003e\n## IOS客户端\n目前app store上**没有免费v2ray客户端**，付费的v2ray客户端有：\n\n- Shadowrocket（俗称小火箭，注意不是shadowrocket VPN\n- i2Ray\n- pepi\n- Kitsunebi\n- Quantumult（内置免费节点）\n\n\n\u003cbr /\u003e​\u003cbr /\u003e\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"classic\"\u003e\u003cp id=\"0f0066fc723e2d5ebc12324212026c61\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1599904973131-a16d23f0-29ce-4955-9231-73d384c57b86.png\" width=\"815\" id=\"zA7Q0\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\" style=\"color: #646464; font-size: 16px\"\u003eV2Ray核心不区分客户端和服务端，因此V2Ray官方未提供各平台的GUI客户端。许多第三方开发人员基于V2Ray核心开发了适用于各平台的GUI客户端，因此每个平台均有多个客户端可供选择。\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e这里收集了v2ray各端客户端版本的介绍和下载，这里只是收藏避免用的时候找不到。:::\u003c/span\u003e\u003c/p\u003e\u003cp id=\"55a5bebcc5f151a2fd5c3a7d5add5869\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2 id=\"ksojb\"\u003e\u003cspan class=\"ne-text\"\u003eWindows客户端\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"825ba41199f68ba9dca9c3ba65597b51\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e最新版v2ray Windows客户端下载链接：\u003c/span\u003e\u003c/p\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"c3f73e7c26bdd3f04945a5c0fafd283c\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eV2RayN：\u003c/span\u003e\u003ca href=\"https://github.com/2dust/v2rayN/releases\" data-href=\"https://github.com/2dust/v2rayN/releases\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e官方下载\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e  \u003c/span\u003e\u003c/li\u003e\u003cli id=\"a4e873e95a5397f89008ec6f42ba60eb\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eV2RayW：\u003c/span\u003e\u003ca href=\"https://github.com/Cenmrev/V2RayW/releases\" data-href=\"https://github.com/Cenmrev/V2RayW/releases\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e官方下载\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"5effe92fec7562170d0ccfd533ed764a\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eV2RayS：\u003c/span\u003e\u003ca href=\"https://github.com/Shinlor/V2RayS/releases\" data-href=\"https://github.com/Shinlor/V2RayS/releases\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e官方下载\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\u003cli id=\"a16224a3b185cc6b5870141fc63f795e\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eClash：\u003c/span\u003e\u003ca href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\" data-href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e官方下载\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"ae5dbd4dc49bd474bec9a3f184d21ab5\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003eWindows系统建议使用V2rayN\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e，界面简洁大气且支持Vmess和Shadowsocks。V2rayW界面配置不支持SS，V2rayS不支持高级传输层设置。Clash基于Yaml语法且纯英文界面，对Clash不了解或新手不建议使用。\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"VbXjl\"\u003e\u003cspan class=\"ne-text\"\u003e安卓客户端\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"65013c76b0ac531cad8466f3b88f6008\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e最新版安卓客户端下载\u003c/span\u003e\u003c/p\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"93994d3337994485c086e695bef346fa\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eV2RayNG：\u003c/span\u003e\u003ca href=\"https://github.com/2dust/v2rayNG/releases\" data-href=\"https://github.com/2dust/v2rayNG/releases\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e官网下载\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\u003cli id=\"eb4e63bb79890bbb524c8764579e86af\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eBifrostV：\u003c/span\u003e\u003ca href=\"https://apkpure.com/bifrostv/com.github.dawndiy.bifrostv\" data-href=\"https://apkpure.com/bifrostv/com.github.dawndiy.bifrostv\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e官网下载\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003ch2 id=\"Tv8jt\"\u003e\u003cspan class=\"ne-text\"\u003eMac客户端\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"3c7bfeaeb9838038132f768a7c48b04a\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e最新版Mac客户端\u003c/span\u003e\u003c/p\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"09554165ba6d6c6e98365ad0d6ac0119\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eV2RayU： \u003c/span\u003e\u003ca href=\"https://github.com/yanue/V2rayU/releases\" data-href=\"https://github.com/yanue/V2rayU/releases\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e官网下载链接\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\u003cli id=\"ecce9b147053324f9971214819cee949\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eV2RayX：\u003c/span\u003e\u003ca href=\"https://github.com/Cenmrev/V2RayX/releases\" data-href=\"https://github.com/Cenmrev/V2RayX/releases\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e官网下载链接\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"2b8944d96b0617e996ff1b7101c23138\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eClashX：\u003c/span\u003e\u003ca href=\"https://github.com/yichengchen/clashX/releases\" data-href=\"https://github.com/yichengchen/clashX/releases\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e官网下载链接\u003c/span\u003e\u003c/a\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"c10dcc894f58e6bf7ba4041fb4d863f9\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003eMac OS X系统建议使用V2rayU\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e，有中文界面且支持vmess/shadowsocks/socks协议。V2rayX没有中文界面，gui界面不支持shadowsocks协议。ClashX是基于Clash的一个gui客户端，用yaml语法配置规则操控软件行为，不建议新手使用。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"fe57411acf0217099ef58fb5bf3ff22d\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2 id=\"RhyW5\"\u003e\u003cspan class=\"ne-text\"\u003eIOS客户端\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"72d4729bfdcef2c3ae8b6fb82f13739b\" class=\"ne-p\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003e目前app store上\u003c/span\u003e\u003cstrong\u003e\u003cspan class=\"ne-text\"\u003e没有免费v2ray客户端\u003c/span\u003e\u003c/strong\u003e\u003cspan class=\"ne-text\"\u003e，付费的v2ray客户端有：\u003c/span\u003e\u003c/p\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"1f007beac54d00b2e2a8cd0c000b7a20\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eShadowrocket（俗称小火箭，注意不是shadowrocket VPN\u003c/span\u003e\u003c/li\u003e\u003cli id=\"b79c92e26dd4e13f6c5ca9f410cc312b\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003ei2Ray\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"4cef778d3ffac5cd6e3c9acf3dede736\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003epepi\u003c/span\u003e\u003c/li\u003e\u003cli id=\"6faae08dac1075d9025e7f4603d4ad82\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eKitsunebi\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cul class=\"ne-ul\"\u003e\u003cli id=\"018997c767ab5c5b129446cd2558beda\" style=\"text-align: left\"\u003e\u003cspan class=\"ne-text\"\u003eQuantumult（内置免费节点）\u003c/span\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp id=\"179cb85a2c9e0f1004812f457f7d84e4\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"51956885404d6710d9915a664058225e\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-09T06:47:49.000Z",
      "deleted_at": "",
      "created_at": "2020-09-12T09:55:16.000Z",
      "updated_at": "2021-10-09T06:47:49.000Z",
      "word_count": 419,
      "path": "jianjunxie/kb/hvryle",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    },
    {
      "id": 12050621,
      "slug": "okxy9e",
      "title": "npm和yarn设置淘宝镜像",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "\u003ca name=\"46f2fa92\"\u003e\u003c/a\u003e\n## NPM设置淘宝镜像\n1.查询当前配置的镜像\u003cbr /\u003e\n\n```bash\nnpm get registry\n\n# https://registry.npmjs.org/\n``` \n\n设置成淘宝镜像\n```bash\nnpm config set registry https://registry.npm.taobao.org/\n```\n\n\u003cbr /\u003e2.换成原来的\u003cbr /\u003e\n\n```bash\nnpm config set registry https://registry.npmjs.org/\n```\n\n\u003cbr /\u003e\n\u003cbr /\u003e\n\n\u003ca name=\"d97a2c27\"\u003e\u003c/a\u003e\n## Yarn 设置淘宝镜像\n\n\u003cbr /\u003e1.查询当前配置的镜像\u003cbr /\u003e\n\n```bash\nyarn config get registry\n\n# https://registry.yarnpkg.com\n```\n\n\u003cbr /\u003e设置成淘宝镜像\u003cbr /\u003e\n\n```bash\nyarn config set registry https://registry.npm.taobao.org/\n```\n\n\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"traditional\"\u003e\u003ch2 id=\"46f2fa92\"\u003e\u003cspan class=\"ne-text\"\u003eNPM设置淘宝镜像\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"f2cc28103b6614d2624445102d2ef2b7\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e1.查询当前配置的镜像\u003c/span\u003e\u003c/p\u003e\u003cp id=\"bab0e75e90588f27c75b787b1ba2427b\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"b57b1611\" class=\"ne-codeblock language-bash\"\u003enpm get registry\n\n# https://registry.npmjs.org/\n``` \n\n设置成淘宝镜像\n```bash\nnpm config set registry https://registry.npm.taobao.org/\u003c/pre\u003e\u003cp id=\"716706f063521f8d30d95c67f865ab30\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"25e15fccd3bf70765e287ff218814648\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e2.换成原来的\u003c/span\u003e\u003c/p\u003e\u003cp id=\"961790bea72ab496044c82fff7a2a2f8\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"764d2d04\" class=\"ne-codeblock language-bash\"\u003enpm config set registry https://registry.npmjs.org/\u003c/pre\u003e\u003cp id=\"a5d3d6e77ad4ce3553fdca5c03306b0f\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"6e9849d6c3869c5ecf96c18f857cb72e\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"dc86d576def01fef5e6c29cf8f09150e\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2 id=\"d97a2c27\"\u003e\u003cspan class=\"ne-text\"\u003eYarn 设置淘宝镜像\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"e8b32ee9c70233b76c7de931ea91db78\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"3f94e642796fbe64c7b71f3fd9381bbd\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e1.查询当前配置的镜像\u003c/span\u003e\u003c/p\u003e\u003cp id=\"8c2d024fffbd54d6844a4dfa65c9ce9e\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"08b2400f\" class=\"ne-codeblock language-bash\"\u003eyarn config get registry\n\n# https://registry.yarnpkg.com\u003c/pre\u003e\u003cp id=\"89243a9a5da730569954eb93c1e7edc5\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"da0067a3b3deb38b61ff2c2c9314ad2c\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e设置成淘宝镜像\u003c/span\u003e\u003c/p\u003e\u003cp id=\"a42fba93884e7682f8ad0f82c7978eeb\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"1a4fd68d\" class=\"ne-codeblock language-bash\"\u003eyarn config set registry https://registry.npm.taobao.org/\u003c/pre\u003e\u003cp id=\"29e1a9d0c2d04614aa2b4eb23d2fb8bc\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-09T06:47:16.000Z",
      "deleted_at": "",
      "created_at": "2020-08-23T05:45:28.000Z",
      "updated_at": "2021-10-09T06:47:17.000Z",
      "word_count": 82,
      "path": "jianjunxie/kb/okxy9e",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    },
    {
      "id": 11825815,
      "slug": "wzc5rm",
      "title": "JS判断一个对象是否为空",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "\u003ca name=\"19c21b10\"\u003e\u003c/a\u003e\n## 用for..in循环\n\n\u003cbr /\u003e用for in循环对象，如果进入循环返回false没进入循环就返回true\u003cbr /\u003e\n\n```javascript\nfunction isEmpty(obj) {\n  for (const key in obj) {\n      // 判断自身的属性\n      if (obj.hasOwnProperty(key)) {\n        return false\n      }\n    }\n    return true;\n  }\n```\n\n\n\u003ca name=\"d542ccd9\"\u003e\u003c/a\u003e\n## 用ES6的Object.keys()\n\n\u003cbr /\u003e用ES6的Object.keys()会返回对象的所有key组成的数组，再通过判断keys是否为空来判断对象是否为空\u003cbr /\u003e\n\n```javascript\nfunction isEmpty(obj) {\n  const keys = Object.keys(obj)\n  // 判断数组是否为空\n  return keys == false\n}\n```\n\n\n\u003ca name=\"01468e3e\"\u003e\u003c/a\u003e\n## 转换成JSON判断\n\n\u003cbr /\u003e用JSON.stringify转成json字符串来判断\u003cbr /\u003e\n\n```javascript\nfunction isEmpty(obj) {\n  return JSON.stringify(obj) === '{}'\n}\n```\n\n\u003cbr /\u003e​\u003cbr /\u003e\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"classic\"\u003e\u003ch2 id=\"19c21b10\"\u003e\u003cspan class=\"ne-text\"\u003e用for..in循环\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"70a57752f1226e14d6c3b082db36d28f\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"39be615d94cc62bca2213b722acd41f6\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e用for in循环对象，如果进入循环返回false没进入循环就返回true\u003c/span\u003e\u003c/p\u003e\u003cp id=\"966b3b4ede001a8a3127e600c7bf802a\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"76b10f43\" class=\"ne-codeblock language-javascript\"\u003efunction isEmpty(obj) {\n  for (const key in obj) {\n      // 判断自身的属性\n      if (obj.hasOwnProperty(key)) {\n        return false\n      }\n    }\n    return true;\n  }\u003c/pre\u003e\u003cp id=\"34780884bcd0f39dd3a8c5841590e6bd\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2 id=\"d542ccd9\"\u003e\u003cspan class=\"ne-text\"\u003e用ES6的Object.keys()\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"ea929a14c0193087f645a29ba6ca96a2\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"20d037cccec05cfd3e287803546ce078\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e用ES6的Object.keys()会返回对象的所有key组成的数组，再通过判断keys是否为空来判断对象是否为空\u003c/span\u003e\u003c/p\u003e\u003cp id=\"4a6017e75f93e4dff398fd3d1c6bc5fe\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"1bea4cc0\" class=\"ne-codeblock language-javascript\"\u003efunction isEmpty(obj) {\n  const keys = Object.keys(obj)\n  // 判断数组是否为空\n  return keys == false\n}\u003c/pre\u003e\u003cp id=\"fca422cc0ddd5b059d2521aafe03748b\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2 id=\"01468e3e\"\u003e\u003cspan class=\"ne-text\"\u003e转换成JSON判断\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"6bab0ff5b853c72f59d29250988933b9\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"a346c53eec7fdd637ba5c375011ede8c\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e用JSON.stringify转成json字符串来判断\u003c/span\u003e\u003c/p\u003e\u003cp id=\"be3878d41291b60e52b9d94d27c492b5\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"03d088f5\" class=\"ne-codeblock language-javascript\"\u003efunction isEmpty(obj) {\n  return JSON.stringify(obj) === '{}'\n}\u003c/pre\u003e\u003cp id=\"435cca8010a1ff4d02c68c56d3125505\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"7660e64347add692d4f4053a9c73db5e\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-09T06:48:27.000Z",
      "deleted_at": "",
      "created_at": "2020-08-18T06:58:19.000Z",
      "updated_at": "2021-10-09T06:48:27.000Z",
      "word_count": 145,
      "path": "jianjunxie/kb/wzc5rm",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    },
    {
      "id": 13402495,
      "slug": "urgr7a",
      "title": "买房了",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "![a152922afcc409e90.jpg](https://cdn.nlark.com/yuque/0/2020/jpeg/476855/1600483190888-dd4c8cfe-01dd-4adc-ba8e-1191beb91b2d.jpeg#height=825\u0026id=KvjU7\u0026margin=%5Bobject%20Object%5D\u0026name=a152922afcc409e90.jpg\u0026originHeight=825\u0026originWidth=1000\u0026originalType=binary\u0026ratio=1\u0026size=774021\u0026status=done\u0026style=none\u0026width=1000)\u003cbr /\u003e昨天跟女朋友一起去开发商那把房子首付给付了，然后去银行办理了按揭，今年算是完成了一件大事，心理也算有个着落，对深圳产生了另一种感觉（虽然我买的是深圳周边）。\n\u003ca name=\"b3ccu\"\u003e\u003c/a\u003e\n## 想法\n说起来也挺突然的，月初的时候看到[《交通运输部关于深圳市开展高品质创新型国际航空枢纽建设等交通强国建设 试点工作的意见》](http://www.gov.cn/zhengce/zhengceku/2020-09/02/content_5539536.htm)然后就看了看深圳周边的房子，最初看中的是东莞虎门片区，然后在贝壳跟中介一聊才知道东莞7月就限购了，而且虎门那里已经涨到了3w多长安那片更是达到了4w+，这太疯了 让我这乡下孩子怎么在大城市生存，东莞买房无望只能将目光转到惠阳， 毕竟那里离深圳也近。\n\u003ca name=\"4yB3X\"\u003e\u003c/a\u003e\n## 看房\n锁定了惠阳那片区域后就约了中介周末去看房，当天中介开车从东莞到深圳宝安来接我，然后又开了2个小时的车到惠阳，开始各种对比最终选中了这套\u003cbr /\u003e![WX20200919-143845@2x.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1600497580482-8d6de1fc-7b8e-42ab-ae63-5b757957de98.png#height=1376\u0026id=D6Vgn\u0026margin=%5Bobject%20Object%5D\u0026name=WX20200919-143845%402x.png\u0026originHeight=1376\u0026originWidth=974\u0026originalType=binary\u0026ratio=1\u0026size=1030243\u0026status=done\u0026style=none\u0026width=974)\u003cbr /\u003e交通: 三高两铁，离深圳14号线延长线草洋站300m左右（以后去深圳上班方便）\u003cbr /\u003e教育: 淡水中心小学，淡水第八小学，汤普幼儿园等\u003cbr /\u003e商业: 天虹，家乐福，沃尔玛等中心区最全配套\u003cbr /\u003e医疗： 三甲惠亚医院（可用深圳社保）\u003cbr /\u003e休闲: 惠阳市政广场，惠阳人民公园、惠阳体育公园等\u003cbr /\u003e![a943e840016684eac.jpg](https://cdn.nlark.com/yuque/0/2020/jpeg/476855/1600497992000-5c6929c8-ba41-45c3-895e-32e7a19c9943.jpeg#height=825\u0026id=SAWe2\u0026margin=%5Bobject%20Object%5D\u0026name=a943e840016684eac.jpg\u0026originHeight=825\u0026originWidth=1000\u0026originalType=binary\u0026ratio=1\u0026size=573011\u0026status=done\u0026style=none\u0026width=1000)\u003cbr /\u003e这个盘综合看都还不错（很适合我这种在深圳买不起房的穷人了），然后当下午就付了定金。\n\u003ca name=\"8o4z0\"\u003e\u003c/a\u003e\n## 规划\n深圳地铁14号线预计2022年底开通，房子明年底交房 然后装修在晾个半年等地铁开通就可以周末2天过去住，工作在南山区 租个房子 用来周一到周四睡个觉。等以后14号线延长线开通，地铁直通楼下，就可以直接住进去了，虽然通勤时间长了一点，但是住自己的加还是比租房子要舒服的多。\u003cbr /\u003e\n\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"classic\"\u003e\u003cp id=\"f0747274aad7fb03a4cabecf758036f5\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/476855/1600483190888-dd4c8cfe-01dd-4adc-ba8e-1191beb91b2d.jpeg\" width=\"1000\" id=\"KvjU7\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e昨天跟女朋友一起去开发商那把房子首付给付了，然后去银行办理了按揭，今年算是完成了一件大事，心理也算有个着落，对深圳产生了另一种感觉（虽然我买的是深圳周边）。\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"b3ccu\"\u003e\u003cspan class=\"ne-text\"\u003e想法\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"673687fee36cc5851d8086b7bf7689e6\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e说起来也挺突然的，月初的时候看到\u003c/span\u003e\u003ca href=\"http://www.gov.cn/zhengce/zhengceku/2020-09/02/content_5539536.htm\" data-href=\"http://www.gov.cn/zhengce/zhengceku/2020-09/02/content_5539536.htm\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003e《交通运输部关于深圳市开展高品质创新型国际航空枢纽建设等交通强国建设 试点工作的意见》\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e然后就看了看深圳周边的房子，最初看中的是东莞虎门片区，然后在贝壳跟中介一聊才知道东莞7月就限购了，而且虎门那里已经涨到了3w多长安那片更是达到了4w+，这太疯了 让我这乡下孩子怎么在大城市生存，东莞买房无望只能将目光转到惠阳， 毕竟那里离深圳也近。\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"4yB3X\"\u003e\u003cspan class=\"ne-text\"\u003e看房\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"7215adb73a7605d9b19f4aff521c1e58\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e锁定了惠阳那片区域后就约了中介周末去看房，当天中介开车从东莞到深圳宝安来接我，然后又开了2个小时的车到惠阳，\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e开始各种对比最终选中了这套\u003c/span\u003e\u003c/p\u003e\u003cp id=\"3263b12d94a9471423c8c8a949c5f2cc\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1600497580482-8d6de1fc-7b8e-42ab-ae63-5b757957de98.png\" width=\"974\" id=\"D6Vgn\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"bfcfa8b81817f4d7b9b6388aa370194e\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\" style=\"color: #333333; font-size: 14px\"\u003e交通: 三高两铁，离深圳14号线延长线草洋站300m左右（以后去深圳上班方便）\u003c/span\u003e\u003c/p\u003e\u003cp id=\"33f6f5ca758c81f9cc57c3400a9c4d30\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\" style=\"color: #333333; font-size: 14px\"\u003e教育: 淡水中心小学，淡水第八小学，汤普幼儿园等\u003c/span\u003e\u003c/p\u003e\u003cp id=\"f4cc6824068499e87a2e42e7df1c3839\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\" style=\"color: #333333; font-size: 14px\"\u003e商业: 天虹，家乐福，沃尔玛等中心区最全配套\u003c/span\u003e\u003c/p\u003e\u003cp id=\"e08c4baa84047ebe28b412c883358b97\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\" style=\"color: #333333; font-size: 14px\"\u003e医疗： 三甲惠亚医院（可用深圳社保）\u003c/span\u003e\u003c/p\u003e\u003cp id=\"14e71c2e5ad2800628bac5a5c2e9598f\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\" style=\"color: #333333; font-size: 14px\"\u003e休闲: 惠阳市政广场，惠阳人民公园、惠阳体育公园等\u003c/span\u003e\u003c/p\u003e\u003cp id=\"6ba6db8c9ad884def6e73d319279c11e\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/jpeg/476855/1600497992000-5c6929c8-ba41-45c3-895e-32e7a19c9943.jpeg\" width=\"1000\" id=\"SAWe2\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"af3780cd7c965e8a4abae5c143fe5c8f\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e这个盘综合看都还不错（\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e很适合我这种在深圳买不起房的穷人了\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e），然后当下午就付了定金。\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"8o4z0\"\u003e\u003cspan class=\"ne-text\"\u003e规划\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"e508e7b31f622be14f4db7560d019516\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e深圳地铁14号线预计2022年底开通，房子明年底交房 然后装修在晾个半年等地铁开通就可以周末2天过去住，工作在南山区 租个\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e房子 用来\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e周一到周四睡个觉。等以后14号线延长线开通，地铁直通楼下，就可以直接住进去了，虽然通勤时间长了一点，但是住自己的加还是比租房子要舒服的多。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"c04e23fc2334aaee12b7c15257683e7b\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-07T03:37:57.000Z",
      "deleted_at": "",
      "created_at": "2020-09-19T02:26:36.000Z",
      "updated_at": "2021-10-08T09:14:19.000Z",
      "word_count": 615,
      "path": "jianjunxie/kb/urgr7a",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    },
    {
      "id": 12377332,
      "slug": "plfuhf",
      "title": "用Nodejs写一个工具CLI工具",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "![截屏2020-08-30 上午11.16.21.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1598757500590-56b8396d-9b16-4406-84bf-0eb865b81612.png#height=918\u0026id=j2COi\u0026margin=%5Bobject%20Object%5D\u0026name=%E6%88%AA%E5%B1%8F2020-08-30%20%E4%B8%8A%E5%8D%8811.16.21.png\u0026originHeight=918\u0026originWidth=1564\u0026originalType=binary\u0026ratio=1\u0026size=209606\u0026status=done\u0026style=none\u0026width=1564)\u003cbr /\u003e在前端开发中，或多或少都会接触各种CLI工具，比如vue-cli、react-create-app、angular-cli等，在开发阶段帮助我们初始化项目、初始化配置、创建文件等，是不是感觉很高端、很强大？不要羡慕，我们自己也能写一个。:::\u003cbr /\u003e_​_\u003cbr /\u003e\n\u003ca name=\"2wtxd\"\u003e\u003c/a\u003e\n## 目标\n我们要完成一下几个小目标\n\n1. 在命令行中输入自定义的指令(我这里叫shanx) 会给出命令提示\n1. 在命令行中输入 shanx init demo 会自动创建 demo 目录，并自动从github上下载指定的模板文件\n\n\n\n\u003ca name=\"JkwfN\"\u003e\u003c/a\u003e\n## 前期准备\n\n1. 创建一个空目录并执行npm init -y初始化项目\n1. 安装下面几个npm依赖包：\n\n[chalk - 给命令行输出文字加背景色的](https://github.com/chalk/chalk#readme)\u003cbr /\u003e[clear - 清空命令行信息](https://github.com/bahamas10/node-clear#readme)\u003cbr /\u003e[commander - 完整的nodejs命令行解决方案](https://github.com/tj/commander.js#readme)\u003cbr /\u003e[download-git-repo - 从GitHub上下载项目到本地](https://gitlab.com/flippidippi/download-git-repo#readme)\u003cbr /\u003e[figlet - 在命令行中打印超大的字](https://github.com/patorjk/figlet.js#readme)\u003cbr /\u003e[ora - 给终端加上一个旋转动画](https://github.com/sindresorhus/ora#readme)\u003cbr /\u003e​\u003cbr /\u003e\n\u003ca name=\"3nbe1\"\u003e\u003c/a\u003e\n## 写我们的CLI\n\u003ca name=\"SyIuu\"\u003e\u003c/a\u003e\n### 简单的命令处理\n在项目中新建bin目录，创建shanx.js文件，代码如下\n```javascript\n#!/usr/bin/env node\nconst program = require('commander');\nconst { version } = require('../package.json');\n\n// 设置版本信息\nprogram.version(version);\n\nprogram\n  .command('init \u003cname\u003e') // 定义命令\n  .description('init project') // 命令描述信息\n  .action((name) =\u003e conso.log(name)); // 处理指令 回调函数中的name 就是命令第三个参数的值 如：shanx init demo 那么name就等于demo\n\nprogram.parse(process.argv); // 通过program.parse(arguments)方法处理参数，没有被使用的选项会存放在program.args数组中。\n\n```\n\u003ca name=\"iKy9A\"\u003e\u003c/a\u003e\n### 测试命令\n\n1. 在package.json中添加bin属性：\n```json\n\"bin\": {\n    \"shanx\": \"./bin/shanx.js\"\n  }\n```\n\n2. 接下来执行\n```bash\nnpm link\n```\n第一步的意思是，输入命令行指令 shanx后执行./bin/shanx.js文件，这里注意./bin/shanx.js顶部要添加 _#!/usr/bin/env node _就是告诉系统可以在PATH目录中查找指令。\u003cbr /\u003e第二步npm link是将当前这个npm包链接到全局，相当于npm install xpack -g ，这样就可以在命令行使用xpack指令了。\n\n3. 在命令行中分别输入：\n```bash\n$ shanx \nUsage: shanx [options] [command]\n\nOptions:\n  -V, --version   output the version number\n  -h, --help      display help for command\n\nCommands:\n  init \u003cname\u003e     init project\n  help [command]  display help for command\n  \n$ shanx --version \n1.0.0\n\n$ shanx init demo\ndemo\n```\n命令正常执行了，我们第一个任务完成了。\n\u003ca name=\"RM2WX\"\u003e\u003c/a\u003e\n### 下载模板到本地\n在项目中新建lib文件夹，并新增init.js处理init命令的逻辑和download.js用来下载GitHub项目到本地。\u003cbr /\u003e这里直接贴上代码\n\u003ca name=\"oxMUz\"\u003e\u003c/a\u003e\n#### init.js\n```javascript\nconst { promisify } = require('util');\nconst figlet = promisify(require('figlet'));\nconst clear = require('clear');\nconst chalk = require('chalk');\nconst { clone } = require('./download');\n\n// 用chalk包自定义log函数，使最终打印在命令行上的提示文字为蓝色\nconst log = (content) =\u003e console.log(chalk.blue(content));\n\n/**\n * 使用node子进程去执行命令\n * @param  {...any} args 类似命令行指令\n */\nconst spawn = (...args) =\u003e {\n  /**\n   * spawn - child_process.spawn 使用指定的命令行参数创建新进程。\n   * spawn 会返回一个带有stdout和stderr流的对象。你可以通过stdout流来读取子进程返回给Node.js的数据。s\n   * tdout拥有’data’,’end’以及一般流所具有的事件。当你想要子进程返回大量数据给Node时，比如说图像处理，读取二进制数据等等，你最好使用spawn方法。\n   */\n  const { spawn } = require('child_process');\n  return new Promise((resolve) =\u003e {\n    // 创建并执行spawn\n    const childProcess = spawn(...args);\n    // 将子进程的标准输出接到主进程，以便能在命令行中输出信息，因为你的终端命令是运行在主进程中的，所以子进程的输出信息是看不到的\n    childProcess.stdout.pipe(process.stdout);\n    // 将子进程的错误流接到主进程\n    childProcess.stderr.pipe(process.stderr);\n    childProcess.on('close', resolve);\n  });\n};\n\n/**\n * 处理命令逻辑，如在命令行输入了shanx init demo 回车就会调用这里，name就等于demo\n * @param {*} name\n */\nmodule.exports = async (name) =\u003e {\n  clear(); // 清空屏幕信息\n  const data = await figlet('Hello shanx'); // 生成大号欢迎信息\n  log(data); // 换个颜色打印\n\n  // clone\n  log('🚀创建项目：' + name);\n  // 克隆存放在github中的仓库，并把项目名称传入\n  await clone('github:jianjunx/my-cli', name);\n  log('🔨开始安装依赖');\n  // 这一步是执行以来安装，第一个参数代表指令名，第二个是参数例如：npm i -g npm 后面三个参数都要放到这个数组中，第三个对象中的cwd代表命令进到哪个目录中执行\n  await spawn('npm', ['i'], { cwd: `./${name}` });\n  // 安装完成 打印信息\n  log(`\n  ==========================\n  👌安装完成\n  cd ${name}\n  npm run serve\n  ==========================\n  `);\n};\n\n```\n\u003ca name=\"yqqr3\"\u003e\u003c/a\u003e\n#### download.js\n```javascript\nconst { promisify } = require('util');\n\n/**\n * 从GitHub仓库下载代码到本地\n * @param {*} repo GitHub仓库名，规则请参考download-git-repo文档\n * @param {*} desc 本地存放的目录\n */\nexports.clone = async (repo, desc) =\u003e {\n  const dowonlad = promisify(require('download-git-repo'));\n  const ora = require('ora');\n  const process = ora(`下载...${repo}`);\n  // 在命令行显示下载中 并加上旋转动画\n  process.start();\n  // 开始下载GitHub项目中的代码到本地\n  await dowonlad(repo, desc);\n  // 下载完成结束旋转动画\n  process.succeed();\n};\n\n```\n接下来更新bin/shanx.js\n```javascript\n#!/usr/bin/env node\nconst program = require('commander');\nconst { version } = require('../package.json');\nconst init = require('../lib/init');\n\n// 设置版本信息\nprogram.version(version);\n\nprogram\n  .command('init \u003cname\u003e') // 定义命令\n  .description('init project') // 命令描述信息\n  .action((name) =\u003e init(name)); // 处理指令 回调函数中的name 就是命令第三个参数的值 如：shanx init demo 那么name就等于demo\n\nprogram.parse(process.argv); // 通过program.parse(arguments)方法处理参数，没有被使用的选项会存放在program.args数组中。\n\n```\n\u003ca name=\"xu8l2\"\u003e\u003c/a\u003e\n## 最终测试\n我们在命令行中输入如下命令：\n```bash\n$ shanx init demo\n```\n![截屏2020-08-30 下午3.46.36.png](https://cdn.nlark.com/yuque/0/2020/png/476855/1598773613685-2508e7d4-a315-4e2b-93e8-1cb731117c99.png#height=928\u0026id=piH6k\u0026margin=%5Bobject%20Object%5D\u0026name=%E6%88%AA%E5%B1%8F2020-08-30%20%E4%B8%8B%E5%8D%883.46.36.png\u0026originHeight=928\u0026originWidth=1334\u0026originalType=binary\u0026ratio=1\u0026size=109730\u0026status=done\u0026style=none\u0026width=1334)\u003cbr /\u003e正确输出了信息，本地也多出了demo的目录和文件，到这里我们的第二个目标也完成了，CLI是不是也没想象中的那么高端。\u003cbr /\u003e完整代码在[jianjunx/my-cli](https://github.com/jianjunx/my-cli)这里。\u003cbr /\u003e\n\u003cbr /\u003e[:$前端,$工具,#cli,#Nodejs:]\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"classic\"\u003e\u003cp id=\"a20d224c568e48b9d67847a2c66a8c01_p_0\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1598757500590-56b8396d-9b16-4406-84bf-0eb865b81612.png\" width=\"1564\" id=\"j2COi\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"7c4fd514531c5f049373872ed5108d28\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e在前端开发中，或多或少都会接触各种CLI工具，比如vue-cli、react-create-app、angular-cli等，在开发阶段帮助我们初始化项目、初始化配置、创建文件等，是不是感觉很高端、很强大？不要羡慕，我们自己也能写一个。:::\u003c/span\u003e\u003c/p\u003e\u003cp id=\"dfc5e3552df4cd419074792ae8c84234\" class=\"ne-p\"\u003e\u003cem\u003e\u003cspan class=\"ne-text\"\u003e\u003c/span\u003e\u003c/em\u003e\u003c/p\u003e\u003ch2 id=\"2wtxd\"\u003e\u003cspan class=\"ne-text\"\u003e目标\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"beeb4d29219287e9cdca8f20f2c705f8\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e我们要完成一下几个小目标\u003c/span\u003e\u003c/p\u003e\u003col class=\"ne-ol\"\u003e\u003cli id=\"4d45a8f7589c99cfa75bc7ba6b3888b7\"\u003e\u003cspan class=\"ne-text\"\u003e在命令行中输入自定义的指令(我这里叫shanx) 会给出命令提示\u003c/span\u003e\u003c/li\u003e\u003cli id=\"57d77d04a8ca4cb3d901b9ae955f397e\"\u003e\u003cspan class=\"ne-text\"\u003e在命令行中输入 shanx init demo 会自动创建 demo 目录，并自动从github上下载指定的模板文件\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"9853115ecaa87c510d82c6f304db1493\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003ch2 id=\"JkwfN\"\u003e\u003cspan class=\"ne-text\"\u003e前期准备\u003c/span\u003e\u003c/h2\u003e\u003col class=\"ne-ol\"\u003e\u003cli id=\"a215b9162b2845cfc25dc792f7e4f4ca\"\u003e\u003cspan class=\"ne-text\"\u003e创建一个空目录并执行npm init -y初始化项目\u003c/span\u003e\u003c/li\u003e\u003cli id=\"0350c38f9dad078d60d6e13f03482df7\"\u003e\u003cspan class=\"ne-text\"\u003e安装下面几个npm依赖包：\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp id=\"217485834173dfff59139a5c5d08848c\" class=\"ne-p\" style=\"text-indent: 2em\"\u003e\u003ca href=\"https://github.com/chalk/chalk#readme\" data-href=\"https://github.com/chalk/chalk#readme\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003echalk - 给命令行输出文字加背景色的\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"26ffc547ce6da38b8dcc41e8aced3dbc\" class=\"ne-p\" style=\"text-indent: 2em\"\u003e\u003ca href=\"https://github.com/bahamas10/node-clear#readme\" data-href=\"https://github.com/bahamas10/node-clear#readme\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003eclear - 清空命令行信息\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"b7c5142483ce4281e0a7a5281a61afec\" class=\"ne-p\" style=\"text-indent: 2em\"\u003e\u003ca href=\"https://github.com/tj/commander.js#readme\" data-href=\"https://github.com/tj/commander.js#readme\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003ecommander - 完整的nodejs命令行解决方案\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"afa4dac526dcb3de574215719b7b5c93\" class=\"ne-p\" style=\"text-indent: 2em\"\u003e\u003ca href=\"https://gitlab.com/flippidippi/download-git-repo#readme\" data-href=\"https://gitlab.com/flippidippi/download-git-repo#readme\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003edownload-git-repo - 从GitHub上下载项目到本地\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"824a27489c6a39206d3905f83dbb1f1b\" class=\"ne-p\" style=\"text-indent: 2em\"\u003e\u003ca href=\"https://github.com/patorjk/figlet.js#readme\" data-href=\"https://github.com/patorjk/figlet.js#readme\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003efiglet - 在命令行中打印超大的字\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"b3534b0ccd7dc960734f54b8c5044411\" class=\"ne-p\" style=\"text-indent: 2em\"\u003e\u003ca href=\"https://github.com/sindresorhus/ora#readme\" data-href=\"https://github.com/sindresorhus/ora#readme\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003eora - 给终端加上一个旋转动画\u003c/span\u003e\u003c/a\u003e\u003c/p\u003e\u003cp id=\"69fc0ea7a215e155a511b17963109950\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\" style=\"color: #ef596f\"\u003e\u003c/span\u003e\u003c/p\u003e\u003ch2 id=\"3nbe1\"\u003e\u003cspan class=\"ne-text\"\u003e写我们的CLI\u003c/span\u003e\u003c/h2\u003e\u003ch3 id=\"SyIuu\"\u003e\u003cspan class=\"ne-text\"\u003e简单的命令处理\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"faf28a98fd648130553fb3d0dee74ece\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e在项目中新建bin目录，创建shanx.js文件，代码如下\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"UGz7g\" class=\"ne-codeblock language-javascript\"\u003e#!/usr/bin/env node\nconst program = require('commander');\nconst { version } = require('../package.json');\n\n// 设置版本信息\nprogram.version(version);\n\nprogram\n  .command('init \u0026lt;name\u0026gt;') // 定义命令\n  .description('init project') // 命令描述信息\n  .action((name) =\u0026gt; conso.log(name)); // 处理指令 回调函数中的name 就是命令第三个参数的值 如：shanx init demo 那么name就等于demo\n\nprogram.parse(process.argv); // 通过program.parse(arguments)方法处理参数，没有被使用的选项会存放在program.args数组中。\n\u003c/pre\u003e\u003ch3 id=\"iKy9A\"\u003e\u003cspan class=\"ne-text\"\u003e测试命令\u003c/span\u003e\u003c/h3\u003e\u003col class=\"ne-ol\"\u003e\u003cli id=\"9614713510337c359c35595608ebb462\"\u003e\u003cspan class=\"ne-text\"\u003e在package.json中添加bin属性：\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre data-language=\"json\" id=\"nt1AT\" class=\"ne-codeblock language-json\"\u003e\u0026quot;bin\u0026quot;: {\n    \u0026quot;shanx\u0026quot;: \u0026quot;./bin/shanx.js\u0026quot;\n  }\u003c/pre\u003e\u003col start=\"2\" class=\"ne-ol\"\u003e\u003cli id=\"fc245c99c3014d434256cf185ae112f2\"\u003e\u003cspan class=\"ne-text\"\u003e接下来执行\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre data-language=\"bash\" id=\"RkMgO\" class=\"ne-codeblock language-bash\"\u003enpm link\u003c/pre\u003e\u003cp id=\"8ac4b2f082ab02fa9334a5cab5a24455\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e第一步的意思是，\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e输入命令行指令 \u003c/span\u003e\u003cspan class=\"ne-text\"\u003eshanx\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e后执行\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e./bin/shanx.js\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e文件，这里注意\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e./bin/shanx.js\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e顶部要添加\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e \u003c/span\u003e\u003cem\u003e\u003cspan class=\"ne-text\"\u003e#!/usr/bin/env node \u003c/span\u003e\u003c/em\u003e\u003cspan class=\"ne-text\"\u003e就是告诉系统可以在PATH目录中查找指令。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"9eac314b1f6236afd74c7513ae6caa68\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e第二步npm link是将当前这个npm包链接到全局，相当于npm install \u003c/span\u003e\u003cspan class=\"ne-text\"\u003expack\u003c/span\u003e\u003cspan class=\"ne-text\"\u003e -g ，这样就可以在命令行使用xpack指令了。\u003c/span\u003e\u003c/p\u003e\u003col start=\"3\" class=\"ne-ol\"\u003e\u003cli id=\"6d7859d45920781f29085edb70a86f69\"\u003e\u003cspan class=\"ne-text\"\u003e在命令行中分别输入：\u003c/span\u003e\u003c/li\u003e\u003c/ol\u003e\u003cpre data-language=\"bash\" id=\"OTayt\" class=\"ne-codeblock language-bash\"\u003e$ shanx \nUsage: shanx [options] [command]\n\nOptions:\n  -V, --version   output the version number\n  -h, --help      display help for command\n\nCommands:\n  init \u0026lt;name\u0026gt;     init project\n  help [command]  display help for command\n  \n$ shanx --version \n1.0.0\n\n$ shanx init demo\ndemo\u003c/pre\u003e\u003cp id=\"87b6809dac10b9b9e453064566ac38fe\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e命令正常执行了，我们第一个任务完成了。\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"RM2WX\"\u003e\u003cspan class=\"ne-text\"\u003e下载模板到本地\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"2feef3a3c2f7cd270f8b90dd40f715cf\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e在项目中新建lib文件夹，并新增init.js处理init命令的逻辑和download.js用来下载GitHub项目到本地。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"4c1e998f91a0c24c86c4c2499f447c31\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e这里直接贴上代码\u003c/span\u003e\u003c/p\u003e\u003ch4 id=\"oxMUz\"\u003e\u003cspan class=\"ne-text\"\u003einit.js\u003c/span\u003e\u003c/h4\u003e\u003cpre data-language=\"javascript\" id=\"OXEcE\" class=\"ne-codeblock language-javascript\"\u003econst { promisify } = require('util');\nconst figlet = promisify(require('figlet'));\nconst clear = require('clear');\nconst chalk = require('chalk');\nconst { clone } = require('./download');\n\n// 用chalk包自定义log函数，使最终打印在命令行上的提示文字为蓝色\nconst log = (content) =\u0026gt; console.log(chalk.blue(content));\n\n/**\n * 使用node子进程去执行命令\n * @param  {...any} args 类似命令行指令\n */\nconst spawn = (...args) =\u0026gt; {\n  /**\n   * spawn - child_process.spawn 使用指定的命令行参数创建新进程。\n   * spawn 会返回一个带有stdout和stderr流的对象。你可以通过stdout流来读取子进程返回给Node.js的数据。s\n   * tdout拥有’data’,’end’以及一般流所具有的事件。当你想要子进程返回大量数据给Node时，比如说图像处理，读取二进制数据等等，你最好使用spawn方法。\n   */\n  const { spawn } = require('child_process');\n  return new Promise((resolve) =\u0026gt; {\n    // 创建并执行spawn\n    const childProcess = spawn(...args);\n    // 将子进程的标准输出接到主进程，以便能在命令行中输出信息，因为你的终端命令是运行在主进程中的，所以子进程的输出信息是看不到的\n    childProcess.stdout.pipe(process.stdout);\n    // 将子进程的错误流接到主进程\n    childProcess.stderr.pipe(process.stderr);\n    childProcess.on('close', resolve);\n  });\n};\n\n/**\n * 处理命令逻辑，如在命令行输入了shanx init demo 回车就会调用这里，name就等于demo\n * @param {*} name\n */\nmodule.exports = async (name) =\u0026gt; {\n  clear(); // 清空屏幕信息\n  const data = await figlet('Hello shanx'); // 生成大号欢迎信息\n  log(data); // 换个颜色打印\n\n  // clone\n  log('🚀创建项目：' + name);\n  // 克隆存放在github中的仓库，并把项目名称传入\n  await clone('github:jianjunx/my-cli', name);\n  log('🔨开始安装依赖');\n  // 这一步是执行以来安装，第一个参数代表指令名，第二个是参数例如：npm i -g npm 后面三个参数都要放到这个数组中，第三个对象中的cwd代表命令进到哪个目录中执行\n  await spawn('npm', ['i'], { cwd: `./${name}` });\n  // 安装完成 打印信息\n  log(`\n  ==========================\n  👌安装完成\n  cd ${name}\n  npm run serve\n  ==========================\n  `);\n};\n\u003c/pre\u003e\u003ch4 id=\"yqqr3\"\u003e\u003cspan class=\"ne-text\"\u003edownload.js\u003c/span\u003e\u003c/h4\u003e\u003cpre data-language=\"javascript\" id=\"lIVeu\" class=\"ne-codeblock language-javascript\"\u003econst { promisify } = require('util');\n\n/**\n * 从GitHub仓库下载代码到本地\n * @param {*} repo GitHub仓库名，规则请参考download-git-repo文档\n * @param {*} desc 本地存放的目录\n */\nexports.clone = async (repo, desc) =\u0026gt; {\n  const dowonlad = promisify(require('download-git-repo'));\n  const ora = require('ora');\n  const process = ora(`下载...${repo}`);\n  // 在命令行显示下载中 并加上旋转动画\n  process.start();\n  // 开始下载GitHub项目中的代码到本地\n  await dowonlad(repo, desc);\n  // 下载完成结束旋转动画\n  process.succeed();\n};\n\u003c/pre\u003e\u003cp id=\"aa66ff0fc7688bd9c5907d3377cfc0e2\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e接下来更新bin/shanx.js\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"ZMVXD\" class=\"ne-codeblock language-javascript\"\u003e#!/usr/bin/env node\nconst program = require('commander');\nconst { version } = require('../package.json');\nconst init = require('../lib/init');\n\n// 设置版本信息\nprogram.version(version);\n\nprogram\n  .command('init \u0026lt;name\u0026gt;') // 定义命令\n  .description('init project') // 命令描述信息\n  .action((name) =\u0026gt; init(name)); // 处理指令 回调函数中的name 就是命令第三个参数的值 如：shanx init demo 那么name就等于demo\n\nprogram.parse(process.argv); // 通过program.parse(arguments)方法处理参数，没有被使用的选项会存放在program.args数组中。\n\u003c/pre\u003e\u003ch2 id=\"xu8l2\"\u003e\u003cspan class=\"ne-text\"\u003e最终测试\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"1c6039d08ee574c301921f30cf954ca8\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e我们在命令行中输入如下命令：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"bash\" id=\"iwYuC\" class=\"ne-codeblock language-bash\"\u003e$ shanx init demo\u003c/pre\u003e\u003cp id=\"255c4ee59a08494cd0acd1114d9ad57a\" class=\"ne-p\"\u003e\u003cimg src=\"https://cdn.nlark.com/yuque/0/2020/png/476855/1598773613685-2508e7d4-a315-4e2b-93e8-1cb731117c99.png\" width=\"1334\" id=\"piH6k\" class=\"ne-image\"\u003e\u003c/p\u003e\u003cp id=\"fec81abaa19a2ccf1cd1ebfbca9b771e\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e正确输出了信息，本地也多出了demo的目录和文件，到这里我们的第二个目标也完成了，CLI是不是也没想象中的那么高端。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"de336fdd877273da1583259a8908f234\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e完整代码在\u003c/span\u003e\u003ca href=\"https://github.com/jianjunx/my-cli\" data-href=\"https://github.com/jianjunx/my-cli\" target=\"_blank\" class=\"ne-link\"\u003e\u003cspan class=\"ne-text\"\u003ejianjunx/my-cli\u003c/span\u003e\u003c/a\u003e\u003cspan class=\"ne-text\"\u003e这里。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"4b655eb506859b2c07afb85372185d6a\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"03626fcd7b3130bf3844517e64f31a87\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e[:$前端,$工具,#cli,#Nodejs:]\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-08T08:52:01.000Z",
      "deleted_at": "",
      "created_at": "2020-08-30T03:11:23.000Z",
      "updated_at": "2021-10-08T09:12:50.000Z",
      "word_count": 1517,
      "path": "jianjunxie/kb/plfuhf",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    },
    {
      "id": 11726181,
      "slug": "zp4qh8",
      "title": "简单实现 call、apply、 bind",
      "book_id": 446092,
      "user_id": 476855,
      "format": "lake",
      "body": "\u003ca name=\"aQkVD\"\u003e\u003c/a\u003e\n## call(),apply()\ncall() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。\u003cbr /\u003e\n\n\u003e call和apply只是接收参数上的不同\n\n\u003ca name=\"47ZFU\"\u003e\u003c/a\u003e\n## 用法(MDN)\n\u003e fun.call(thisArg, arg1, arg2, ...)\n\n\u003ca name=\"OCHz1\"\u003e\u003c/a\u003e\n### thisArg\n在fun函数运行时指定的this值。需要注意的是，指定的this值并不一定是该函数执行时真正的this值，如果这个函数处于non-strict mode，则指定为null和undefined的this值会自动指向全局对象(浏览器中就是window对象)，同时值为原始值(数字，字符串，布尔值)的this会指向该原始值的自动包装对象。\n\u003ca name=\"Rqq8t\"\u003e\u003c/a\u003e\n###  arg1, arg2, ...\n指定的参数列表。\n```javascript\nfunction greet() {\n  var reply = [this.animal, 'typically sleep between', this.sleepDuration].join(' ');\n  console.log(reply);\n}\nvar obj = {\n  animal: 'cats', sleepDuration: '12 and 16 hours'\n};\ngreet.call(obj);  // cats typically sleep between 12 and 16 hours\n```\n\n\u003cbr /\u003e上面例子中当用call调用greet方法的时候，该方法的this值会绑定到obj对象。\u003cbr /\u003e我们来分析下call做了哪些事情：\u003cbr /\u003e1. greet函数执行了；\u003cbr /\u003e2. greet执行上下文中的this被改成了obj\u003cbr /\u003e下面我们来动手实现一下：\n```javascript\nconst obj = {\n  name: '111',\n  fn: function(){\n    console.log(this.name);\n  }\n}\n// 我们知道fn中的this 就是调用它的obj\nobj.fn()\n// 在Function原型上添加我们的方法\nFunction.prototype.myCall = function(ctx, ...args){\n  //这里用Symbol以免覆盖了属性\n  const key = Symbol('fn');\n  /**\n   * call的第一个参数如果为null和undefined时this值会自动指向全局对象(浏览器中就是window对象)，\n   * 同时值为原始值(数字，字符串，布尔值)的this会指向该原始值的自动包装对象，原生的call会用Object包装一下。\n   */\n  ctx = ctx ? Object(ctx) : window;\n  /**\n   * 这里的this就指向调用的调用call的函数，上例中就是greet\n   * 所以我们在实现的时候只要将call的第一个参数挂到greet中的某一个属性中去就可以了\n   */\n  ctx[key] = this;\n  // 这里调用并将参数传给 this函数\n  const result = ctx[key](...args);\n  // 调用完成后将刚刚挂在的属性删除\n  delete ctx[key];\n  return result;\n}\n// 测试一下\ngreet.myCall(obj);  // cats typically sleep between 12 and 16 hours\n```\n# bind()\nbind和call的区别是call会被立即调用执行，而bind则返回的是一个改变了执行上下文的函数。\n```javascript\nfunction greet() {\n  var reply = [this.animal, 'typically sleep between', this.sleepDuration].join(' ');\n  console.log(reply);\n}\nvar obj = {\n  animal: 'cats', sleepDuration: '12 and 16 hours'\n};\ngreet.call(obj);  // cats typically sleep between 12 and 16 hours\ngreet.bind(obj)(); // cats typically sleep between 12 and 16 hours\n```\n我们用call来实现\n```javascript\nFunction.prototype.myBind = function(ctx, ...args){\n  const self = this;\n  // 返回一个函数\n  return function(){\n   // 用call去调用并返回结果\n    return self.call(ctx, ...args);\n  }\n}\n```\n​\u003cbr /\u003e\n",
      "body_html": "\u003c!doctype html\u003e\u003cdiv class=\"lake-content\" typography=\"traditional\"\u003e\u003ch2 id=\"aQkVD\"\u003e\u003cspan class=\"ne-text\"\u003ecall(),apply()\u003c/span\u003e\u003c/h2\u003e\u003cp id=\"e4b0b37559d2e0deec8072bccc07aec5\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003ecall() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"8fb2f3ea3f706213c99982852dce5680\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cdiv class=\"ne-quote\"\u003e\u003cp id=\"98ff6a4d111da0d9f34ad10325c562e4\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003ecall和apply只是接收参数上的不同\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003ch2 id=\"47ZFU\"\u003e\u003cspan class=\"ne-text\"\u003e用法(MDN)\u003c/span\u003e\u003c/h2\u003e\u003cdiv class=\"ne-quote\"\u003e\u003cp id=\"e150cdae32234b97c614696ceebbf893\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003efun.call(thisArg, arg1, arg2, ...)\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e\u003ch3 id=\"OCHz1\"\u003e\u003cspan class=\"ne-text\"\u003ethisArg\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"bd7bdd1532bb3db78647957c043468a8\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e在fun函数运行时指定的this值。需要注意的是，指定的this值并不一定是该函数执行时真正的this值，如果这个函数处于non-strict mode，则指定为null和undefined的this值会自动指向全局对象(浏览器中就是window对象)，同时值为原始值(数字，字符串，布尔值)的this会指向该原始值的自动包装对象。\u003c/span\u003e\u003c/p\u003e\u003ch3 id=\"Rqq8t\"\u003e\u003cspan class=\"ne-text\"\u003e arg1, arg2, ...\u003c/span\u003e\u003c/h3\u003e\u003cp id=\"33ef3a33d09b6e091cd1a52d7790ac18\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e指定的参数列表。\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"F88Pp\" class=\"ne-codeblock language-javascript\"\u003efunction greet() {\n  var reply = [this.animal, 'typically sleep between', this.sleepDuration].join(' ');\n  console.log(reply);\n}\nvar obj = {\n  animal: 'cats', sleepDuration: '12 and 16 hours'\n};\ngreet.call(obj);  // cats typically sleep between 12 and 16 hours\u003c/pre\u003e\u003cp id=\"528b00f6ea5b7811c605cca34ad2841c\" class=\"ne-p\"\u003e\u003cbr\u003e\u003c/p\u003e\u003cp id=\"c2b43c59d19a7b3b08b6d808d956fbcc\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e上面例子中当用call调用greet方法的时候，该方法的this值会绑定到obj对象。\u003c/span\u003e\u003c/p\u003e\u003cp id=\"92dafe56f894a3ed5f01a4f2edb61d3f\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e我们来分析下call做了哪些事情：\u003c/span\u003e\u003c/p\u003e\u003cp id=\"e10152cc7d77acafc2f306d2926e2581\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e1. greet函数执行了；\u003c/span\u003e\u003c/p\u003e\u003cp id=\"644c4a90d70029f457c3d9c2369e7217\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e2. greet执行上下文中的this被改成了obj\u003c/span\u003e\u003c/p\u003e\u003cp id=\"d81f65b8cb62aeb658442ba3f7d53485\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e下面我们来动手实现一下：\u003c/span\u003e\u003c/p\u003e\u003cpre data-language=\"javascript\" id=\"yieSL\" class=\"ne-codeblock language-javascript\"\u003econst obj = {\n  name: '111',\n  fn: function(){\n    console.log(this.name);\n  }\n}\n// 我们知道fn中的this 就是调用它的obj\nobj.fn()\n// 在Function原型上添加我们的方法\nFunction.prototype.myCall = function(ctx, ...args){\n  //这里用Symbol以免覆盖了属性\n  const key = Symbol('fn');\n  /**\n   * call的第一个参数如果为null和undefined时this值会自动指向全局对象(浏览器中就是window对象)，\n   * 同时值为原始值(数字，字符串，布尔值)的this会指向该原始值的自动包装对象，原生的call会用Object包装一下。\n   */\n  ctx = ctx ? Object(ctx) : window;\n  /**\n   * 这里的this就指向调用的调用call的函数，上例中就是greet\n   * 所以我们在实现的时候只要将call的第一个参数挂到greet中的某一个属性中去就可以了\n   */\n  ctx[key] = this;\n  // 这里调用并将参数传给 this函数\n  const result = ctx[key](...args);\n  // 调用完成后将刚刚挂在的属性删除\n  delete ctx[key];\n  return result;\n}\n// 测试一下\ngreet.myCall(obj);  // cats typically sleep between 12 and 16 hours\n```\n# bind()\nbind和call的区别是call会被立即调用执行，而bind则返回的是一个改变了执行上下文的函数。\n```javascript\nfunction greet() {\n  var reply = [this.animal, 'typically sleep between', this.sleepDuration].join(' ');\n  console.log(reply);\n}\nvar obj = {\n  animal: 'cats', sleepDuration: '12 and 16 hours'\n};\ngreet.call(obj);  // cats typically sleep between 12 and 16 hours\ngreet.bind(obj)(); // cats typically sleep between 12 and 16 hours\n```\n我们用call来实现\n```javascript\nFunction.prototype.myBind = function(ctx, ...args){\n  const self = this;\n  // 返回一个函数\n  return function(){\n   // 用call去调用并返回结果\n    return self.call(ctx, ...args);\n  }\n}\u003c/pre\u003e\u003cp id=\"7e7bc6b378058eaf9ab1b7cdf68b0418\" class=\"ne-p\"\u003e\u003cspan class=\"ne-text\"\u003e\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e",
      "creator_id": 0,
      "public": 1,
      "status": 0,
      "content_updated_at": "2021-10-09T06:48:15.000Z",
      "deleted_at": "",
      "created_at": "2020-08-16T08:06:23.000Z",
      "updated_at": "2021-10-09T06:48:15.000Z",
      "word_count": 713,
      "path": "jianjunxie/kb/zp4qh8",
      "action_type": "",
      "publish": false,
      "user": {
        "id": 476855,
        "type": "User",
        "login": "jianjunxie",
        "name": "谢小舜",
        "description": "",
        "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/476855/1597942117047-avatar/b6179c9d-0f0e-457c-8a15-f93e650a5b6d.png"
      },
      "book": {
        "id": 446092,
        "type": "Book",
        "slug": "kb",
        "name": "博客知识库",
        "user_id": 476855,
        "description": "可用于学习笔记、周报、项目文档等场景",
        "items_count": 21
      }
    }
  ],
  "err": 0,
  "msg": "ok"
}